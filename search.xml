<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rime输入法折腾记</title>
    <url>//hobbies/rime/</url>
    <content><![CDATA[<p>早就听闻了Rime输入法的大名，但一直看教程觉得太麻烦，终于花时间好好折腾了一下，其实比想象中简单太多了。</p>
<h1 id="Rime介绍"><a href="#Rime介绍" class="headerlink" title="Rime介绍"></a>Rime介绍</h1><p>没深入研究过，但给我的个人感觉Rime应该是以开源的输入法框架，任何系统如果想要使用，必须先自己开发一套工具。于是macOS上叫作鼠须管，Windows上叫作小狼毫，iOS上也有叫作仓输入法</p>
<h1 id="使用Rime的好处"><a href="#使用Rime的好处" class="headerlink" title="使用Rime的好处"></a>使用Rime的好处</h1><p>不用联网，不用担心隐私问题，自己维护词库，很有成就感。</p>
<h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><p>这里建议直接使用雾凇输入法：<a href="https://github.com/iDvel/rime-ice">https://github.com/iDvel/rime-ice</a></p>
<p>作者文档写的清晰易懂，简单来说就是download整个repo，然后把整个文件拖到Rime的配置文件夹就行了。整个rime包括设置词库表等一切东西，都是由<code>.yaml</code>所控制的，所以用整个repo的文件，替换掉原本的就可以完美使用雾凇输入法了。</p>
<p>目前看来，只要使用简体字，使用雾凇输入法配置是最佳捷径。</p>
<h1 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h1><p>在使用了半个月后，发现patch功能相当关键。比方说，我目前用的是雾凇输入法，作者隔一段时间就会更新。但是如果作者更新的文件已经被我更改过了，这就牵扯到了一个很麻烦的问题：合并。</p>
<p>想要解决合并这个问题，最好的办法就是“<strong>解耦</strong>”，也就是用patch。不管作者更改了什么内容，我只要拥有patch文件，<strong>我的个人设置永远不会和源文件有冲突。</strong> 这样做的好处不仅是合并方便，也可以告诉自己在源文件上更改了什么，就算过了很长一段时间，只要查找patch文件，就可以一目了然。</p>
<p>下面说一下如何写patch:<br>文件名为 <code>xxx.custom.yaml</code>，内容以 <code>patch:</code> 开头的，是补丁文件，<strong>注意缩进</strong>，可以对原配置进行覆盖和追加。</p>
<ul>
<li><p><strong>方案 <code>xxx.schema.yaml</code> 的补丁文件是 <code>xxx.custom.yaml</code></strong>, 而不是<code>xxx.schema.custom.yaml</code></p>
</li>
<li><p><code>dict</code>文件不能写patch，目前我自己想到的方法就是通过patch更改schema文件内容，重新写一个自己的custom dict。这样一来也实现了解耦。但是注意这样做会把原来的数据库更改为你的新的dict所创建的名字，因此，<strong>做好schema的patch之后一定要更改数据库的名字。</strong></p>
</li>
</ul>
<p>格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line">	<span class="attr">a/b:</span></span><br><span class="line">	<span class="string">a/b/+:</span></span><br></pre></td></tr></table></figure>

<p>一般用的多的就是这两种<br>详情参考：<br><a href="https://dvel.me/posts/rime-ice/#%E4%BB%A5-patch-%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E8%A1%A5%E4%B8%81">https://dvel.me/posts/rime-ice/#%E4%BB%A5-patch-%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E8%A1%A5%E4%B8%81</a></p>
<p>以及官方文档：<br><a href="https://github.com/rime/home/wiki/CustomizationGuide#%E5%AE%9A%E8%A3%BD%E6%8C%87%E5%8D%97">https://github.com/rime/home/wiki/CustomizationGuide#%E5%AE%9A%E8%A3%BD%E6%8C%87%E5%8D%97</a></p>
]]></content>
      <categories>
        <category>Hobbies</category>
      </categories>
      <tags>
        <tag>rime</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试——Java Concepts</title>
    <url>//java-interview/java-general/</url>
    <content><![CDATA[<h1 id="CI-CD-save-time"><a href="#CI-CD-save-time" class="headerlink" title="CI&#x2F;CD save time"></a>CI&#x2F;CD save time</h1><p>In a recent project, we improved our CI&#x2F;CD pipeline by implementing Docker layer which make Docker reuses the cached layers instead of rebuilding them, speeding up the build process. Also, we optimized our Maven dependencies, like using Maven Dependency Plugin to analyze and identify unused or redundant dependencies in our projects wihch result in less memory usage during the build process.</p>
<h1 id="Agile-development"><a href="#Agile-development" class="headerlink" title="Agile development"></a>Agile development</h1><p>Yeah, sure. We were following the Agile development process. We have sprint meetings every two weeks. In these meetings, we discuss the previous sprint, including which tasks were completed and which were blocked. We then decide which blocked tasks to move to the next sprint. We also talk about new stories, discuss their points, and assign them to developers. That’s what we do in the sprint planning meetings. Additionally, we have stand-up meetings every morning where we discuss what we did yesterday, what we’re planning to do today, and any obstacles we’re facing. If I’m hitting a roadblock, it’s not just a straight shot to the tech lead. Instead, I bring it up in our stand-up, so everyone gets the heads up and we can brainstorm solutions together. </p>
<p>(可选)<br>It’s all about keeping things transparent and working as a team.<br>That’s essentially what our meetings entail. There’s also the development process, which includes branching, and the CI&#x2F;CD. I can explain more about these aspects. Would you like me to continue?</p>
<h1 id="how-do-you-use-git-and-github"><a href="#how-do-you-use-git-and-github" class="headerlink" title="how do you use git and github"></a>how do you use git and github</h1><p>I start with <code>git init</code> for new projects or <code>git clone</code> for existing project. I create feature branches using <code>git checkout -b</code>, make changes, and stage them with <code>git add</code>. I commit using <code>git commit -m</code>, push with <code>git push origin</code>. And I will send the github pull requet, and once the request is approve I use <code>git pull</code>. </p>
<p><code>git rebase</code> is a command to integrate changes from one branch to another by reapplying commits on top of another base.</p>
<p>Git squash combines multiple commits into one for a cleaner history, typically done with <code>git rebase -i</code>.</p>
<ul>
<li>how did you do the <strong>code review</strong>:<br>we have slack channel called code review, and it will fetch github pull request.</li>
</ul>
<ol>
<li>Open the PR in GitHub.</li>
<li>Read the PR description for context.</li>
<li>Review changes in the “Files changed” tab.</li>
<li>Optionally, run the code locally for complex changes.</li>
<li>I will leave the comments by either approving or requesting changes based on the review.</li>
</ol>
<h1 id="check-code-coverage"><a href="#check-code-coverage" class="headerlink" title="check code coverage"></a>check code coverage</h1><p>We used tool Jacoco. We just need to add the dependency in maven and use cli <code>mvn clean verify</code>. The report will be available in <code>target/site/jacoco/index.html</code></p>
<p>sonarQube for code coverage</p>
<ul>
<li><p>kafka partitions:<br>For our order processing Kafka topic, we configured 12 partitions. This number was chosen based on factors such as expected traffic, consumer throughput, and fault tolerance requirements.</p>
</li>
<li><p>kafka topic name:<br>order-created-events, order-payment-events, order-fulfillment-events, order-status-updates, order-shipment-events, order-cancellation-events</p>
</li>
<li><p><strong>How many microservices</strong><br>I was directly involved with the integration of approximately 5 to 6 microservices. These included inventory management, order tracking service, and notifications. But for the whole e-commerce system, there are more than 100 microservices.</p>
</li>
<li><p><strong>microservices in your project communicate with each other?</strong><br>Microservices in my project communicate through RESTful APIs over HTTP&#x2F;HTTPS, using JSON or XML for data interchange, and sometimes through asynchronous messaging systems like Apache Kafka.</p>
</li>
</ul>
<h1 id="Scrum-board-vs-Kanban-board"><a href="#Scrum-board-vs-Kanban-board" class="headerlink" title="Scrum board vs Kanban board"></a>Scrum board vs Kanban board</h1><p>Scrum board: Sprint-based, resets after each sprint, with defined roles and ceremonies.</p>
<p>Kanban board: Continuous flow, focuses on WIP limits, no predefined sprints or roles.</p>
<p>Scrum board is a visual representation of the work to be done, structured around sprints, typically 2-4 weeks long, with defined roles and ceremonies. It resets after each sprint.</p>
<p>Kanban board is a continuous flow model focusing on visualizing work in progress (WIP) limits, without predefined sprints or roles, aiming to improve efficiency by reducing the time it takes to complete each task.</p>
<h1 id="How-do-you-deploy-your-project"><a href="#How-do-you-deploy-your-project" class="headerlink" title="How do you deploy your project"></a>How do you deploy your project</h1><ol>
<li><strong>Package</strong> the application (JAR or WAR).</li>
<li><strong>Select AWS Service</strong>（三选一）: Elastic Beanstalk for automated deployments, EC2 for server control, or Lambda for serverless.</li>
<li><strong>Setup CI&#x2F;CD</strong>:<ul>
<li>Use <strong>AWS CodeBuild</strong> for continuous integration to automatically build and test your code every time there’s a change.</li>
<li>Use <strong>AWS CodePipeline</strong> for continuous deployment to automate the deployment process to your selected AWS service.</li>
</ul>
</li>
<li><strong>Setup AWS CLI</strong></li>
<li><strong>Deploy</strong>:<br> （三选一）<ul>
<li>Elastic Beanstalk: Upload your package via the console or EB CLI.</li>
<li>EC2: Launch an instance, connect, and deploy your app.</li>
<li>Lambda: Create a function and upload your package as a ZIP.</li>
</ul>
</li>
<li><strong>Configure</strong> security and roles.</li>
<li><strong>Test</strong> the deployment.</li>
<li><strong>Monitor</strong> with AWS CloudWatch.</li>
</ol>
<h1 id="What-is-CICD"><a href="#What-is-CICD" class="headerlink" title="What is CICD"></a>What is CICD</h1><p>CI&#x2F;CD is all about making sure any new code gets tested and shipped out automatically, so we can get updates out faster and more reliably.</p>
<h1 id="What-service-are-you-using-in-AWS"><a href="#What-service-are-you-using-in-AWS" class="headerlink" title="What service are you using in AWS"></a>What service are you using in AWS</h1><ol>
<li>EC2 for hosting the application</li>
<li>RDS (MySQL) for structured data</li>
<li>DynamoDB for high-scale, low-latency NoSQL data</li>
<li>S3 for static asset storage</li>
<li>ELB for load balancing and high availability</li>
<li>ElastiCache (Redis) for distributed caching</li>
<li>Amazon MSK(Managed Streaming for Apache Kafka)</li>
</ol>
<p>Our CI&#x2F;CD pipeline utilizes:</p>
<ol start="7">
<li>CodeCommit for version control</li>
<li>CodeBuild for automated builds and tests</li>
<li>CodePipeline for release automation</li>
<li>CodeDeploy for automated deployments to EC2 instances</li>
</ol>
<h1 id="Life-cycle-of-the-maven"><a href="#Life-cycle-of-the-maven" class="headerlink" title="Life cycle of the maven"></a>Life cycle of the maven</h1><ol>
<li><strong>Default Lifecycle</strong>:<ul>
<li><code>validate</code></li>
<li><code>compile</code></li>
<li><code>test</code></li>
<li><code>package</code></li>
<li><code>verify</code></li>
<li><code>install</code></li>
<li><code>deploy</code></li>
</ul>
</li>
<li><strong>Clean Lifecycle</strong>:<ul>
<li><code>pre-clean</code></li>
<li><code>clean</code></li>
<li><code>post-clean</code></li>
</ul>
</li>
<li><strong>Site Lifecycle</strong>:<ul>
<li><code>pre-site</code></li>
<li><code>site</code></li>
<li><code>post-site</code></li>
<li><code>site-deploy</code></li>
</ul>
</li>
</ol>
<h1 id="What-is-the-Final-keyword"><a href="#What-is-the-Final-keyword" class="headerlink" title="What is the Final keyword?"></a>What is the Final keyword?</h1><ol>
<li><code>final</code> primitive: value immutable after assignment.</li>
<li><code>final</code> object: object cannot be reference again.</li>
<li><code>final</code> method: cannot be overridden.</li>
<li><code>final</code> class: cannot be extended.</li>
</ol>
<p>(For objective type,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is allowed: modifying the object that person1 points to.  </span></span><br><span class="line">person1.setName(<span class="string">&quot;Jane&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is not allowed and will cause a compilation error:  </span></span><br><span class="line"><span class="comment">// person1 = new Person(&quot;Doe&quot;); )</span></span><br></pre></td></tr></table></figure>

<h1 id="What-is-a-static-field-static-method-and-static-class"><a href="#What-is-a-static-field-static-method-and-static-class" class="headerlink" title="What is a static field, static method, and static class?"></a>What is a static field, static method, and static class?</h1><p><strong>static field&#x2F;static variable</strong>: A variable is declared as Static, then we called static variable. Static variables are only created once, and they are created when the class is loaded into memory. All instances of the class share the same static variable.</p>
<p>When to use: should be used to declare common property of all objects.</p>
<p><strong>static method</strong>: </p>
<ul>
<li>Belong to the class, not instances</li>
<li>Called using the class name without creating an object</li>
<li>Cannot directly access non-static methods or fields</li>
<li><code>this</code> and <code>super</code> are not usable within static methods</li>
</ul>
<p><strong>Static Block</strong>: The static block gets executed exactly once when the class is first loaded. Use the static block to initialize the static variables.</p>
<p><strong>Static nested classes</strong>:</p>
<ul>
<li>Are a type of inner class that is static</li>
<li>Can only access static members of the outer class</li>
<li>Improve code readability and maintainability</li>
<li>Can be instantiated without creating an outer class object, unlike regular inner classes</li>
</ul>
<h1 id="What-are-primitive-data-types-in-Java"><a href="#What-are-primitive-data-types-in-Java" class="headerlink" title="What are primitive data types in Java?"></a>What are primitive data types in Java?</h1><p>Primitive data are predefined in Java and named by a reserved keyword. They represent the most basic data types you can work with. They are stored on the stack which make them more efficient. Java programming language supports eight different primitive types - byte, short, int, long, float, double, boolean and char.</p>
<h1 id="What-are-the-differences-between-passing-by-value-and-passing-by-reference"><a href="#What-are-the-differences-between-passing-by-value-and-passing-by-reference" class="headerlink" title="What are the differences between passing by value and passing by reference?"></a>What are the differences between passing by value and passing by reference?</h1><p>Passing by value means that a copy of the actual value is passed to the function. Any changes made to this value in the function do not affect the original value outside the function.</p>
<p>Passing by reference means that a reference (or pointer) to the actual data is passed to the function. Changes made to this data within the function affect the original data outside the function.</p>
<p>In Java, modifications to the object inside the method affect the original because when the object is passed into the method, it actually passes it with the reference, not the object itself. That means the original reference and the method’s parameter reference point to the same object. Therefore, any modification made to the object through this reference is reflected outside the method as well.</p>
<h1 id="Difference-between-int-and-Integer"><a href="#Difference-between-int-and-Integer" class="headerlink" title="Difference between int and Integer"></a>Difference between int and Integer</h1><p><code>int</code>: primitive type not an object, default value is 0, can not be null, store in stack, more efficient. <br><code>Integer</code>: It is an object, can be nullable, wrapper class, store in heap. It is necessary when working with collections that only store objects, such as <code>ArrayList</code>,</p>
<h1 id="Time-complexity-of-linkedList"><a href="#Time-complexity-of-linkedList" class="headerlink" title="Time complexity of linkedList"></a>Time complexity of linkedList</h1><p>For LinkedLists, head&#x2F;tail operations are O(1); others are O(n).<br>O(1): <code>offerFirst()</code>, <code>offerLast()</code>, <code>pollFirst()</code>, <code>pollLast()</code><br>O(n): <code>contains()</code>, <code>get()</code>,<code>set(int index, E element)</code></p>
<h1 id="Difference-between-ArrayList-and-LinkedList"><a href="#Difference-between-ArrayList-and-LinkedList" class="headerlink" title="Difference between ArrayList and LinkedList"></a>Difference between ArrayList and LinkedList</h1><p>ArrayList:</p>
<ul>
<li>Uses dynamic array internally</li>
<li>O(1) random access(O(1) for get and set)</li>
<li>Less memory overhead</li>
<li>Faster for sequential traversal</li>
<li>Automatic resizing</li>
<li>slower insertions and deletions (O(n) in the worst case) due to the need to resize and shift elements.</li>
</ul>
<p>LinkedList:</p>
<ul>
<li>Uses doubly-linked list internally</li>
<li>O(1) insertion&#x2F;deletion at ends</li>
<li>slower element access (O(n)),  since it must traverse the list. </li>
<li>More memory overhead</li>
<li>Faster for mid-list insertion&#x2F;deletion</li>
<li>No resizing needed</li>
</ul>
<p>ArrayList is suited for scenarios with frequent reads, while LinkedList is better for frequent writes.</p>
<h1 id="Difference-between-vector-and-arraylist"><a href="#Difference-between-vector-and-arraylist" class="headerlink" title="Difference between vector and arraylist"></a>Difference between vector and arraylist</h1><p><code>Vector</code>: synchronized, thread-safe, slower, size increases by percentage or doubles, legacy.<br><code>ArrayList</code>: not synchronized, faster, preferred without thread safety, grows by half of its size, modern Collections Framework.</p>
<h1 id="New-features-of-Java-8"><a href="#New-features-of-Java-8" class="headerlink" title="New features of Java 8"></a>New features of Java 8</h1><p>Java 8 introduced several key features:</p>
<ol>
<li><strong>Lambda expressions</strong> provide a concise way to implement functional interfaces. </li>
<li><strong>The Stream API</strong> enables functional-style operations on collections, such as filter, map, and reduce. </li>
<li><strong>Default Methods</strong>: Allow methods in interfaces to have an implementation.</li>
<li><strong>Method References</strong>: Method reference is <strong>used to refer method of functional interface</strong>. It is compact and easy form of lambda expression.</li>
<li><strong>Optional</strong> helps avoid null-related errors by representing optional values. </li>
<li><strong>Nashorn JavaScript Engine</strong>: A high-performance JavaScript runtime for Java, replacing Rhino.</li>
<li><strong>New Date-Time API</strong>: Inspired by Joda-Time, addressing the shortcomings of the old java.util.Date and Calendar.</li>
<li><strong>Type Annotations</strong>: Enable annotations to be used in more places than before, such as in generics, which helps in improving code analysis.</li>
</ol>
<h1 id="What-is-the-advantage-of-Java-8-compared-to-Java-7"><a href="#What-is-the-advantage-of-Java-8-compared-to-Java-7" class="headerlink" title="What is the advantage of Java 8 compared to Java 7?"></a>What is the advantage of Java 8 compared to Java 7?</h1><p>回答java 8的new feature加上：<br>These features improve developer productivity, code readability, and application performance.</p>
<h1 id="Give-me-an-example-of-how-you-use-java-8-feature-in-your-project"><a href="#Give-me-an-example-of-how-you-use-java-8-feature-in-your-project" class="headerlink" title="Give me an example of how you use java 8 feature in your project"></a>Give me an example of how you use java 8 feature in your project</h1><p>Optional:<br>Optional to handle null values more gracefully, enhancing code readability and reducing the chances of NullPointerExceptions.</p>
<p>Stream:<br>I used the Stream API to filter out products with low stock, specifically those with quantities less than 10, and collected the result into a list for a quick restock action:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Product&gt; lowStockProducts = products.stream()</span><br><span class="line">    .filter(product -&gt; product.getQuantity() &lt; <span class="number">10</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Lambda:<br>Comparator for reverse sort.</p>
<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>A Stream in Java is an abstraction for processing sequences of elements, supporting operations like filter, map, and reduce, introduced in Java 8 within the <code>java.util.stream</code> package.</p>
<h1 id="What-is-the-difference-between-collection-and-stream-API"><a href="#What-is-the-difference-between-collection-and-stream-API" class="headerlink" title="What is the difference between collection and stream API?"></a>What is the difference between collection and stream API?</h1><p>The Collection API manages data storage and direct manipulation (like adding, removing, or accessing elements), while the Stream API focuses on functional-style operations (like filter, map, reduce) on collections, without storing data and enabling easy parallel processing.</p>
<p>记忆：<br><strong>Collection API</strong>: Manages data storage, direct manipulation (add, remove, access).<br><strong>Stream API</strong>: Functional-style operations (filter, map, reduce) on collections, no data storage, facilitates parallel processing.</p>
<h1 id="Intermediate-operation-and-terminal-operation"><a href="#Intermediate-operation-and-terminal-operation" class="headerlink" title="Intermediate operation and terminal operation"></a>Intermediate operation and terminal operation</h1><p>Intermediate operations, like <code>filter</code> and <code>map</code>, transform streams without finalizing results and are lazy. Terminal operations, such as <code>collect</code> and <code>forEach</code>, produce final results, ending the stream’s use.</p>
<h1 id="optional-class"><a href="#optional-class" class="headerlink" title="optional class"></a>optional class</h1><p>The <code>Optional</code> class in Java is a container for nullable values, introduced in Java 8 to avoid <code>NullPointerException</code> and to provide a clearer way to handle the presence or absence of a value.</p>
<p>记忆：<br>Optional: a container for nullable values, avoids NullPointerException, manages value presence&#x2F;absence.</p>
<h1 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h1><p>A functional interface is an interface with exactly one abstract method, allowing lambda expressions. It can include default or static methods.</p>
<h1 id="Default-method-vs-static-method"><a href="#Default-method-vs-static-method" class="headerlink" title="Default method vs. static method"></a>Default method vs. static method</h1><ul>
<li>Default methods can be overridden by implementing classes, whereas static methods cannot.</li>
<li>Default methods are instance methods, static methods are class methods.</li>
<li>You can call default methods on instances of implementing classes, whereas static methods are called on the interface itself.</li>
</ul>
<h1 id="Memory-management-of-Java-8-feature"><a href="#Memory-management-of-Java-8-feature" class="headerlink" title="Memory management of Java 8 feature?"></a>Memory management of Java 8 feature?</h1><p><strong>Metaspace</strong>: replace PermGen, using native memory, reduce OutOfMemoryErrors.<br><strong>Garbage-First Collector (G1 GC)</strong>: optimizes garbage collection using predictable pauses in large memeory environment.<br><strong>Some improvement in heap management</strong>: make it more efficient memory allocation and management.</p>
<h1 id="How-did-you-use-lambda-expression"><a href="#How-did-you-use-lambda-expression" class="headerlink" title="How did you use lambda expression?"></a>How did you use lambda expression?</h1><p>In my projects, I’ve used lambda expressions to simplify the implementation of Functional interfaces, such as comparators for sorting collections. For example, when sorting a list of custom objects based on a particular field, I used lambda expressions to create a concise and readable comparator without the need for an anonymous class. Here’s how I implemented it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; people = getPeopleList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort people by their age using a lambda expression</span></span><br><span class="line">people.sort((p1, p2) -&gt; p1.getAge() - p2.getAge());</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Different-types-of-method-reference-mf"><a href="#Different-types-of-method-reference-mf" class="headerlink" title="Different types of method reference (mf)"></a>Different types of method reference (mf)</h1><p>Method reference is a shorthand notation of a lambda expression to call a method.<br>There are four types of method references in Java:</p>
<ol>
<li>Reference to a static method: <code>ClassName::staticMethodName</code></li>
<li>Reference to an instance method of a particular object: <code>instance::instanceMethodName</code></li>
<li>Reference to an instance method of an arbitrary object of a particular type: <code>ClassName::instanceMethodName</code></li>
<li>Reference to a constructor: <code>ClassName::new</code></li>
</ol>
<p>四种方法引用形式</p>
<ol>
<li><p><strong>静态方法引用（ClassName::staticMethodName）</strong></p>
<p> 这种形式用于引用类的静态方法。当你需要通过Lambda表达式调用静态方法时，可以使用静态方法引用。例如，<code>Math::max</code> 相当于 <code>(x, y) -&gt; Math.max(x, y)</code>，这里直接引用了<code>Math</code>类的静态方法<code>max</code>。</p>
</li>
<li><p><strong>实例方法引用（instance::instanceMethodName）</strong></p>
<p> 当你已经有一个对象的实例，并希望通过这个实例调用其实例方法时，可以使用这种形式。例如，对于<code>String</code>对象<code>s</code>，<code>s::toLowerCase</code> 相当于 <code>() -&gt; s.toLowerCase()</code>。这里直接通过<code>s</code>这个特定实例调用<code>toLowerCase</code>方法，注意这个方法不接受参数。</p>
</li>
<li><p><strong>类的任意对象的实例方法引用（ClassName::instanceMethodName）</strong></p>
<p> 适用于第一个Lambda参数是方法调用者，其他Lambda参数（如果有的话）是方法的参数。例如，<code>String::toLowerCase</code> 相当于 <code>(str) -&gt; str.toLowerCase()</code>。这表示对于传入的任意<code>String</code>对象<code>str</code>，都调用其<code>toLowerCase</code>方法。</p>
</li>
<li><p><strong>构造函数引用（ClassName::new）</strong></p>
<p> 当你需要通过Lambda表达式调用类的构造函数来创建对象实例时，可以使用这种形式。例如，<code>ArrayList::new</code> 相当于 <code>() -&gt; new ArrayList&lt;&gt;()</code>。这里直接引用<code>ArrayList</code>的默认构造函数来创建一个新的<code>ArrayList</code>实例。</p>
</li>
</ol>
<h1 id="What-is-functional-programming-compile-or-not"><a href="#What-is-functional-programming-compile-or-not" class="headerlink" title="What is functional programming? -&gt; compile or not"></a>What is functional programming? -&gt; compile or not</h1><p>Functional programming is a paradigm that uses pure functions and avoids state changes. Java supports it and compiles it like any other code.</p>
<h1 id="Explain-heap-and-stack"><a href="#Explain-heap-and-stack" class="headerlink" title="Explain heap and stack"></a>Explain heap and stack</h1><ul>
<li><p><strong>Heap:</strong> Memory area for object storage, shared across threads, dynamically allocated and deallocated, managed by garbage collection.</p>
</li>
<li><p><strong>Stack:</strong> Memory for method execution, including local variables and method call references, unique to each thread, automatically allocated and deallocated as methods are called and return.</p>
</li>
</ul>
<h1 id="What-is-Java-Heap-memory"><a href="#What-is-Java-Heap-memory" class="headerlink" title="What is Java Heap memory?"></a>What is Java Heap memory?</h1><p>Java Heap memory is a runtime area where all class instances and arrays get their memory. It is created at the JVM start-up. Heap memory is shared among all JVM threads, and the garbage collector reclaims the heap memory for objects that are no longer referenced, making space available for new objects.</p>
<p>记忆：<br>Runtime area for class instances and arrays, created at JVM start-up, shared among all JVM threads. Garbage collector reclaims memory for unreferenced objects, freeing space for new ones.</p>
<h1 id="Do-you-know-memory-leak"><a href="#Do-you-know-memory-leak" class="headerlink" title="Do you know memory leak?"></a>Do you know memory leak?</h1><p>A memory leak occurs when objects are no longer being used by the application but cannot be garbage collected because they are still referenced by other objects. This situation leads to unnecessary memory consumption, potentially exhausting the available memory, which can degrade performance or cause the application to crash. Effective memory management practices, such as nullifying references when objects are no longer needed and using weak references when appropriate, can help prevent memory leaks.</p>
<p>记忆：<br>Memory leak: Occurs when unused objects can’t be garbage collected due to still being referenced, leading to unnecessary memory consumption and potential performance issues or crashes.</p>
<p>How to solve: Effective management, like nullifying references or using weak references, helps prevent this.</p>
<h1 id="What-is-garbage-collection-in-java"><a href="#What-is-garbage-collection-in-java" class="headerlink" title="What is garbage collection in java?"></a>What is garbage collection in java?</h1><p>Garbage collection in Java is a process by the Java Virtual Machine (JVM) to identify and dispose of objects that are no longer needed by a Java application, freeing up their resources and memory. This automatic memory management helps prevent memory leaks and ensures efficient use of memory, allowing developers to focus on application logic rather than manual memory management.</p>
<p>记忆：Java Virtual Machine (JVM) to identify and dispose of objects that are no longer needed by a Java application, freeing up their resources and memory.</p>
<h1 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h1><p>the String Pool is a special area in the Java heap memory used to store unique string literals. When a string is created using string literals, Java checks the String Pool first. If the string already exists, the same reference is returned, instead of creating a new object. This mechanism reduces memory usage and improves performance by reusing immutable string objects. However, when new strings are created using the <code>new</code> operator, they are not added to the String Pool.</p>
<p>记忆：<br>String Pool: in heap memory, store string. </p>
<h1 id="Difference-between-Equals-and"><a href="#Difference-between-Equals-and" class="headerlink" title="Difference between Equals and &#x3D;&#x3D;"></a>Difference between Equals and &#x3D;&#x3D;</h1><p>In Java, &#x3D;&#x3D; checks reference equality and .equals() checks value equality. For primitive types, &#x3D;&#x3D; directly compares values. For objects, .equals() compares memory locations by default unless .equals() is overridden.</p>
<p><code>==</code> checks for reference equality. For primitives, it compares values; for objects, memory locations.<br><code>.equals()</code> checks value equality, comparing memory locations by default unless overridden.</p>
<h1 id="What-is-OOP"><a href="#What-is-OOP" class="headerlink" title="What is OOP?"></a>What is OOP?</h1><p>Object-Oriented Programming (OOP) is a paradigm that uses objects and classes to encapsulate data and behavior. It emphasizes <strong>Abstraction</strong>, <strong>Encapsulation</strong>, <strong>Inheritance</strong>, and <strong>Polymorphism</strong> to promote modular and reusable code.</p>
<ol>
<li><p><strong>Abstraction</strong>: Abstraction is a process of hiding the implementation details and showing only functionality to the user. For example, a TV remote control hides the complexity of the internal circuitry, focusing only on the buttons needed to operate the TV. In Java, abstraction is implemented through abstract classes and interfaces.</p>
</li>
<li><p><strong>Encapsulation</strong>: Encapsulation is a process of Binding data and methods within a class. It uses access modifiers (public, private, protected, default) to restrict access to the object’s components. </p>
</li>
<li><p><strong>Inheritance</strong>: Using inheritance means deﬁning a parent-child relationship between classes, by doing so, you can reuse the code that is already deﬁned in the parent class. Code reusability is the biggest advantage of Inheritance. Java does not allow multiple inheritance through classes but it allows it through interfaces.</p>
</li>
<li><p><strong>Polymorphism</strong>: Poly means many and Morph means forms. Polymorphism is the process in which an object or function takes different forms. In Java, polymorphism is implemented through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism).</p>
</li>
</ol>
<h1 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h1><p>Poly means many and Morph means forms. Polymorphism is the process in which an object or function takes different forms. There are 2 types of Polymorphism :</p>
<ul>
<li>Compile Time Polymorphism (Method Overloading)</li>
<li>Run Time Polymorphism (Method Overriding)</li>
</ul>
<h1 id="Polymorphism-Overriding-Vs-Overloading"><a href="#Polymorphism-Overriding-Vs-Overloading" class="headerlink" title="Polymorphism: Overriding Vs Overloading"></a>Polymorphism: Overriding Vs Overloading</h1><p><strong>Overloading</strong> is defining multiple methods with the same name but different parameters in the same class for compile-time polymorphism.<br><strong>Overriding</strong> is redefining a parent class method in a subclass with the same signature for runtime polymorphism.</p>
<h1 id="What-are-different-access-modifiers-and-what-do-they-do"><a href="#What-are-different-access-modifiers-and-what-do-they-do" class="headerlink" title="What are different access modifiers and what do they do?"></a>What are different access modifiers and what do they do?</h1><p>Access modifiers determine the scope of access for classes, methods, and variables. There are four main types:</p>
<ul>
<li><strong><code>private</code></strong>: Accessible only within its own class.</li>
<li><strong><code>default</code></strong>: Accessible within the same package.</li>
<li><strong><code>protected</code></strong>: Accessible within the same package and by subclasses.</li>
<li><strong><code>public</code></strong>: Accessible from any class.</li>
</ul>
<h1 id="What-is-Interface-and-what-is-abstract-class-What-are-the-differences-between-them"><a href="#What-is-Interface-and-what-is-abstract-class-What-are-the-differences-between-them" class="headerlink" title="What is Interface and what is abstract class? What are the differences between them?"></a>What is Interface and what is abstract class? What are the differences between them?</h1><p>An interface in Java defines a contract with abstract methods for classes to implement. </p>
<p>An abstract class is a base class that cannot be instantiated, containing both abstract and concrete methods.</p>
<p>The differences are:</p>
<ul>
<li><p>Abstract class can have both abstract and concrete methods but interface can only have abstract methods (Java eight onwards, it can have default and static methods as well)</p>
</li>
<li><p>Abstract class methods can have access modiﬁers other than public but interface methods are implicitly public and abstract</p>
</li>
<li><p>Abstract class can have ﬁnal, non-ﬁnal, static and non-static variables but interface variables are only static and ﬁnal - A subclass can extend only one abstract class but it can implement multiple interfaces</p>
</li>
<li><p>An Abstract class can extend one other class and can implement multiple interfaces but an interface can only extend other interfaces </p>
</li>
<li><p>the most difference for me I think is <strong>We can still extend only one class but can implement multiple interfaces.</strong></p>
</li>
</ul>
<h2 id="What-to-choose-–-interface-or-abstract-class"><a href="#What-to-choose-–-interface-or-abstract-class" class="headerlink" title="What to choose – interface or abstract class"></a>What to choose – interface or abstract class</h2><ul>
<li>When you want to provide default implementation to some of the common methods that can be used directly by the sub-classes then you can use abstract class because it can have concrete methods also, this is not the case with Interface because the child classes that are implementing this interface will have to provide implementation for all the methods that are declared in the interface</li>
<li>If your contract keeps on changing then Interface will create problems because then you will have to provide implementation of those new methods in all the implementing classes, whereas with abstract class you can provide one default implementation to the new methods and only change those implementing classes that are actually going to use these new methods </li>
<li>Most of the times, interfaces are a good choice. It is also one of the best practices, when you code in terms of interfaces.</li>
</ul>
<h1 id="why-hashtable-cannot-contain-null-key"><a href="#why-hashtable-cannot-contain-null-key" class="headerlink" title="why hashtable cannot contain null key"></a>why hashtable cannot contain null key</h1><p><code>Hashtable</code> cannot contain null keys because it uses the key’s hash code to store and retrieve entries, and calling <code>hashCode()</code> on a null key would result in a <code>NullPointerException</code>. Additionally, <code>HashMap</code> allows null key.</p>
<h1 id="StringBuilder-and-StringBuffer"><a href="#StringBuilder-and-StringBuffer" class="headerlink" title="StringBuilder and StringBuffer"></a>StringBuilder and StringBuffer</h1><p><code>StringBuilder</code> is faster and not thread-safe, suitable for single-threaded environments. </p>
<p><code>StringBuffer</code> is synchronized, making it thread-safe but slower. It is ideal for multi-threaded environments. </p>
<p>Both <code>StringBuffer</code> and <code>StringBuilder</code> offer similar methods for string manipulation.</p>
<h1 id="Error-vs-Exception-runtime"><a href="#Error-vs-Exception-runtime" class="headerlink" title="Error vs. Exception (runtime)"></a>Error vs. Exception (runtime)</h1><p><img src="/../../assets/CleanShot%202024-02-22%20at%2015.32.03@2x.jpg"></p>
<ul>
<li><p><strong>Errors:</strong> Indicate critical problems, usually outside the application’s control (e.g., <code>OutOfMemoryError</code>). Recovery is typically not possible.</p>
</li>
<li><p><strong>Exceptions:</strong> Represent potentially recoverable conditions.</p>
<ul>
<li><strong>Checked(compile time exception):</strong> Require explicit handling via try-catch or method throws declarations (e.g., <code>FileNotFoundException</code>).</li>
<li><strong>Unchecked (runtime exception):</strong> Occur due to coding issues or unexpected runtime conditions (e.g., <code>NullPointerException</code>).</li>
</ul>
</li>
</ul>
<h1 id="Checked-unchecked-exception"><a href="#Checked-unchecked-exception" class="headerlink" title="Checked &#x2F; unchecked exception"></a>Checked &#x2F; unchecked exception</h1><ul>
<li><p><strong>Checked exceptions</strong> are exceptions that must be either caught or declared in the method signature. These are also known as compile-time exceptions because the compiler checks at compile time to ensure that these exceptions are handled by the programmer. They are subclasses of <code>Exception</code> excluding <code>RuntimeException</code> and its subclasses. Examples include <code>IOException</code>, <code>SQLException</code>.</p>
</li>
<li><p><strong>Unchecked exceptions</strong> are exceptions that do not need to be explicitly handled or declared in the method signature. They are checked at runtime rather than at compile time. Unchecked exceptions are subclasses of <code>RuntimeException</code>, and the compiler does not enforce handling of these exceptions. Examples include <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>.</p>
</li>
</ul>
<h1 id="handle-exception"><a href="#handle-exception" class="headerlink" title="handle exception"></a>handle exception</h1><p>try-catch block is used for exception handling. If you think that certain statements may throw an exception, surround them with try block.</p>
<p>A try block is always followed by a catch block or ﬁnally or both.</p>
<p>You cannot use the try block alone</p>
<h1 id="How-do-you-deal-with-the-error"><a href="#How-do-you-deal-with-the-error" class="headerlink" title="How do you deal with the error?"></a>How do you deal with the error?</h1><ol>
<li>Understand the error via the message and stack trace.</li>
<li>Reproduce the error if necessary.</li>
<li>Consult Java documentation for insights.</li>
<li>Debug using tools like breakpoints and logging.</li>
<li>Fix the error by modifying the code.</li>
<li>Test to ensure the fix resolves the issue.</li>
<li>Document the issue and solution for future reference.</li>
</ol>
<h1 id="how-do-you-deal-with-exceptions-in-your-project"><a href="#how-do-you-deal-with-exceptions-in-your-project" class="headerlink" title="how do you deal with exceptions in your project?"></a>how do you deal with exceptions in your project?</h1><p>In my project, we handle exceptions by:</p>
<ol>
<li>Using try-catch blocks for local handling.</li>
<li>Declaring exceptions with the <code>throws</code> clause for caller-level handling.</li>
<li>Creating custom exceptions for specific error scenarios.</li>
<li>Implementing global exception handling for uniform application responses.</li>
<li>Logging exceptions for debugging and audit trails.</li>
<li>Employing try-with-resources for automatic resource management.</li>
<li>Providing meaningful user feedback without exposing sensitive details.</li>
</ol>
<h1 id="Throw-vs-throws"><a href="#Throw-vs-throws" class="headerlink" title="Throw vs. throws"></a>Throw vs. throws</h1><ul>
<li><strong><code>throw</code></strong>: Throws a single exception instance.</li>
<li><strong><code>throws</code></strong>: Declares multiple potential exceptions in a method signature.</li>
</ul>
<p>The <code>throw</code> keyword explicitly throws a single exception within a code block or function, requiring an Exception class instance. In contrast, the <code>throws</code> keyword, used in method signatures, declares potential exceptions (checked or unchecked) that a method may throw, allowing for multiple exception types to be specified.</p>
<h1 id="give-me-one-example-of-NullPointerException"><a href="#give-me-one-example-of-NullPointerException" class="headerlink" title="give me one example of NullPointerException"></a>give me one example of NullPointerException</h1><p>A <code>NullPointerException</code> in Java occurs when you try to use a reference that points to no location in memory (null) as though it were referencing an object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> text.length(); <span class="comment">// This line will throw a NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="avoid-NullPointerException"><a href="#avoid-NullPointerException" class="headerlink" title="avoid NullPointerException"></a>avoid NullPointerException</h1><p>To avoid NullPointerException: </p>
<ol>
<li>Check for null before using objects. </li>
<li>Use Optional. Provide default values.</li>
<li>Use annotations @NotNull and @Nullable. </li>
<li>Return empty collections instead of null.</li>
</ol>
<h1 id="How-to-custom-an-Exception"><a href="#How-to-custom-an-Exception" class="headerlink" title="How to custom an Exception?"></a>How to custom an Exception?</h1><p>To create a custom exception, we extend the <code>Exception</code> class or one of its subclasses.</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON (JavaScript Object Notation) is a lightweight format for data exchange, easy for humans to read and write, and for machines to parse and generate. It’s widely used in web applications for data interchange between servers and clients.</p>
<h1 id="What-is-the-purpose-of-serial-version-UID"><a href="#What-is-the-purpose-of-serial-version-UID" class="headerlink" title="What is the purpose of serial version UID"></a>What is the purpose of serial version UID</h1><p>The <code>serialVersionUID</code> is a unique identifier for Serializable classes. It ensures compatibility between versions of a Serializable class during serialization and deserialization, preventing <code>InvalidClassException</code>.</p>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>JDBC is a Java API for database interaction, enabling Java programs to connect, query, and update databases in a database-independent manner.</p>
<h1 id="Comparable-vs-Comparator"><a href="#Comparable-vs-Comparator" class="headerlink" title="Comparable vs. Comparator"></a>Comparable vs. Comparator</h1><p>Both of them are used to sort the collectioin of objects. </p>
<ul>
<li><code>Comparable</code> enables single sorting method; <code>Comparator</code> allows multiple.</li>
<li><code>Comparable</code> is in <code>java.lang</code>; <code>Comparator</code> in <code>java.util</code>.</li>
<li>Implementing <code>Comparable</code> requires class modification; <code>Comparator</code> does not.</li>
<li><code>Comparable</code> uses <code>compareTo()</code> for sorting; <code>Comparator</code> uses <code>compare()</code>.</li>
<li>Use <code>Collections.sort(list)</code> for <code>Comparable</code>; for <code>Comparator</code>, use <code>Collections.sort(list, comparator)</code>. </li>
<li><code>Comparator</code> is necessary for sorting third-party or unmodifiable classes.</li>
</ul>
<h1 id="Git-command-you-used-in-the-project"><a href="#Git-command-you-used-in-the-project" class="headerlink" title="Git command you used in the project"></a>Git command you used in the project</h1><p>In my project, I frequently used several Git commands to manage source code and collaborate with my team effectively. The most common commands include:</p>
<ul>
<li><code>git clone</code>: Clone a repository.</li>
<li><code>git branch</code>: Manage branches.</li>
<li><code>git checkout</code>: Switch branches.</li>
<li><code>git status</code>: Check status of changes.</li>
<li><code>git add</code>: Stage changes.</li>
<li><code>git commit</code>: Commit changes.</li>
<li><code>git push</code>: Push changes to remote.</li>
<li><code>git pull</code>: Update local repo from remote.</li>
<li><code>git merge</code>: Merge branches.</li>
</ul>
<h1 id="Do-you-prefer-SVN-or-Git"><a href="#Do-you-prefer-SVN-or-Git" class="headerlink" title="Do you prefer SVN or Git?"></a>Do you prefer SVN or Git?</h1><p>I prefer Git for its distributed nature, superior branching and merging capabilities, and widespread adoption.</p>
<h1 id="What-is-generic"><a href="#What-is-generic" class="headerlink" title="What is generic?"></a>What is generic?</h1><p>Generics in Java are a feature that allows classes, interfaces, and methods to operate on types specified by the programmer at compile time. This provides stronger type checks at compile time and eliminates the need for casting, which can make code safer and more readable. Generics also enable programmers to implement generic algorithms that work on collections of different types, while providing compile-time type safety.</p>
<p>记忆：Generics: Enable classes, interfaces, and methods to work with specified types at compile time, enhancing type safety and readability. </p>
<h1 id="example-and-advatanges-and-how-do-you-use-generics-in-your-project"><a href="#example-and-advatanges-and-how-do-you-use-generics-in-your-project" class="headerlink" title="example and advatanges and how do you use generics in your project?"></a>example and advatanges and how do you use generics in your project?</h1><p>Advantanges:</p>
<ul>
<li>Generics provide compile-time type safety that allows programmers to catch invalid types at compile time.</li>
<li>When using Generics, there is no need of type-casting.</li>
<li>By using generics, programmers can implement generic algorithms that work on collections of different types, can be customized and are type safe and easier to read.</li>
</ul>
<p>Concise: </p>
<ol>
<li><strong>Type Safety</strong>: Generics ensure type correctness at compile time.</li>
<li><strong>No Casting</strong>: No need for type-casting.</li>
<li><strong>Flexible Algorithms</strong>: Enables type-safe, readable algorithms for diverse data types.</li>
</ol>
<p>In my project, we use generics extensively to ensure type safety and reduce the need for type casting, which can lead to runtime errors. For example, we utilize generic collections like <code>List&lt;T&gt;</code>, <code>Map&lt;K, V&gt;</code>, and <code>Set&lt;T&gt;</code> to store elements of a specific type, ensuring compile-time type checking. This makes our code more readable and robust, as it prevents class cast exceptions that could occur at runtime.</p>
<h1 id="Serialization-explation-and-example"><a href="#Serialization-explation-and-example" class="headerlink" title="Serialization, explation and example"></a>Serialization, explation and example</h1><p>Serialization is a mechanism to convert the state of an object into a byte stream. De-serialization is the reverse process that rebuilds the object from the byte stream. </p>
<p>Example:</p>
<h1 id="Explain-equals-and-hashcode-contract"><a href="#Explain-equals-and-hashcode-contract" class="headerlink" title="Explain equals and hashcode contract"></a>Explain equals and hashcode contract</h1><p>If two objects are equals according to equals() method, then their hashcode must be same but reverse is not true i.e. if two objects have same hashcode then they may&#x2F;may not be equals.</p>
<p>解释：</p>
<ul>
<li>如果两个对象相等（即<code>equals()</code>方法返回<code>true</code>），那么它们的<code>hashCode()</code>方法也必须返回相同的整数值。</li>
<li>如果两个对象的<code>hashCode()</code>返回不同的整数值，那么这两个对象通过<code>equals()</code>方法比较不应该是相等的。</li>
<li>如果<code>hashCode()</code>相等，也不意味着equals相等，因为可能面临Hash conflict。</li>
</ul>
<p>这个契约的目的是确保基于哈希的集合的一致性和性能。如果相等的对象有不同的哈希码，那么这将违反哈希集合的基本原则，可能导致无法正确地检索对象。例如，在<code>HashMap</code>中，对象的哈希码用于决定对象存储的位置。如果两个键对象<code>equals()</code>相等但有不同的哈希码，那么它们可能被存储在哈希表的不同位置，这将导致无法通过一个键找到另一个键对应的值。</p>
<h1 id="Why-need-to-implement-the-hashcode-when-implementing-equals"><a href="#Why-need-to-implement-the-hashcode-when-implementing-equals" class="headerlink" title="Why need to implement the hashcode() when implementing equals()?"></a>Why need to implement the hashcode() when implementing equals()?</h1><p>This is because we must maintain the general contract for the <code>hashCode</code> method, which states that equal objects must have equal hash codes. This ensures consistent behavior when objects are inserted into hash-based collections like <code>HashMap</code>, <code>HashSet</code>, and <code>Hashtable</code>. If <code>hashCode()</code> is not overridden, two equal objects might have different hash codes, which can lead to incorrect behavior in collections.</p>
<h1 id="What-happens-if-hash-collision-occurs"><a href="#What-happens-if-hash-collision-occurs" class="headerlink" title="What happens if hash collision occurs?"></a>What happens if hash collision occurs?</h1><p>When a hash collision occurs, Java stores all elements with the same hash code in the same bucket but in separate structures (like linked lists or trees) to distinguish them. This way, despite sharing a hash code, each element can still be uniquely identified and accessed.</p>
<h1 id="Have-you-ever-used-any-cache-in-your-project-Explain-how-it-works"><a href="#Have-you-ever-used-any-cache-in-your-project-Explain-how-it-works" class="headerlink" title="Have you ever used any cache in your project? Explain how it works"></a>Have you ever used any cache in your project? Explain how it works</h1><p>Yes, I’ve used caching. It stores frequently accessed data in memory for faster access. If data is in cache (cache hit), it’s returned from there. If not (cache miss), it’s fetched from the database, stored in cache, and returned.</p>
<h1 id="Implement-a-singleton"><a href="#Implement-a-singleton" class="headerlink" title="Implement a singleton"></a>Implement a singleton</h1><h2 id="Eager-loaded-恶汉式"><a href="#Eager-loaded-恶汉式" class="headerlink" title="Eager loaded (恶汉式)"></a>Eager loaded (恶汉式)</h2><p>静态方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">  </span><br><span class="line">        System.out.println(instance == instance2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>static block 静态代码块实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">  </span><br><span class="line">        System.out.println(instance1 == instance2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Lazy-Loaded-（懒汉式"><a href="#Lazy-Loaded-（懒汉式" class="headerlink" title="Lazy-Loaded （懒汉式)"></a>Lazy-Loaded （懒汉式)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();  </span><br><span class="line">  </span><br><span class="line">        System.out.println(instance1 == instance2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Do-you-know-about-the-Future"><a href="#Do-you-know-about-the-Future" class="headerlink" title="Do you know about the Future?"></a>Do you know about the Future?</h1><p>The <code>Future</code> interface in Java is used for asynchronous computation, offering methods to check completion (<code>isDone()</code>), wait for completion (<code>get()</code>), cancel the task (<code>cancel(boolean mayInterruptIfRunning)</code>), and check if the task was cancelled (<code>isCancelled()</code>). It enables efficient management of concurrent tasks in Java applications.</p>
<h1 id="callable-future"><a href="#callable-future" class="headerlink" title="callable, future"></a>callable, future</h1><p>In Java 8, <code>Callable</code> is an interface that represents a task that returns a result. Unlike <code>Runnable</code>, which does not return a result, <code>Callable</code> can return a value and also throw a checked exception. You use a <code>Callable</code> in situations where you need to perform a task in a separate thread and then return the result of the task to the main thread.</p>
<p>A <code>Future</code> represents the result of an asynchronous computation. When you submit a <code>Callable</code> task to an ExecutorService, you receive a <code>Future</code> object. With this <code>Future</code> object, you can check if the computation is complete, wait for its completion, and retrieve the result of the computation. The <code>get</code> method of <code>Future</code> blocks until the computation is complete and then returns the result of the computation. If the computation has already completed when <code>get</code> is called, it returns the result immediately.</p>
<p>Concise:<br><code>Callable</code> is an interface for tasks returning a result, supporting checked exceptions. <code>Future</code> represents the result of an asynchronous computation, allowing to check completion, wait, and retrieve the computation’s outcome.</p>
<h1 id="What-is-the-completablefuture"><a href="#What-is-the-completablefuture" class="headerlink" title="What is the completablefuture?"></a>What is the completablefuture?</h1><p><code>CompletableFuture</code> is like a more advanced version of <code>Future</code> that came out with Java 8. It lets you work with the result of asynchronous operations without getting stuck waiting for them. You can set up a chain of things to do once your operation finishes, like processing the result or handling errors, and all of this happens in a non-blocking way. It’s really handy for writing A-sync code.</p>
<ol>
<li><p><strong><code>runAsync(Runnable runnable)</code></strong>: This method is used for asynchronously executing tasks that don’t return a value. Imagine you just need to log something in the background without caring about the outcome.</p>
</li>
<li><p><strong><code>thenAccept(Consumer&lt;? super T&gt; action)</code></strong>: Once the <code>CompletableFuture</code> has completed and produced a result, this method allows you to consume (i.e., do something with) the result without returning a new value. For example, you might want to print out the result of an asynchronous computation once it’s available.</p>
</li>
<li><p><strong><code>thenCombine(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)</code></strong>: This method is used to combine the results of two asynchronous computations. When both <code>CompletableFutures</code> have completed, you can perform some operation using both of their results and return a new <code>CompletableFuture</code>. It’s like you and a friend each buy different ingredients for a meal, and once you’re both back, you cook a big dinner together.</p>
</li>
</ol>
<h1 id="What-design-patterns-did-you-worked-on-before"><a href="#What-design-patterns-did-you-worked-on-before" class="headerlink" title="What design patterns did you worked on before?"></a>What design patterns did you worked on before?</h1><p>Singleton</p>
<h1 id="What-situation-will-cause-OutOfMemory-How-to-avoid-OutOfMemory"><a href="#What-situation-will-cause-OutOfMemory-How-to-avoid-OutOfMemory" class="headerlink" title="What situation will cause OutOfMemory? &#x2F; How to avoid OutOfMemory?"></a>What situation will cause OutOfMemory? &#x2F; How to avoid OutOfMemory?</h1><p>OutOfMemoryError can occur due to:</p>
<ol>
<li>Creating too many objects.</li>
<li>Memory leaks.</li>
<li>Excessive class loading.</li>
<li>Too many threads.</li>
<li>Large arrays or collections.</li>
<li>Improper use of native code.</li>
</ol>
<p>To avoid <code>OutOfMemoryError</code> in Java:</p>
<ol>
<li><strong>Increase Heap Size</strong>: Use JVM options <code>-Xms</code> and <code>-Xmx</code> to set the minimum and maximum heap size respectively.</li>
<li><strong>Proper Object Management</strong>: Ensure objects are de-referenced when no longer needed so they can be garbage collected.</li>
<li><strong>Use Profiling Tools</strong>: Tools like VisualVM and JProfiler can help identify memory leaks.</li>
<li><strong>Avoid Large Objects</strong>: If possible, avoid creating large objects, especially long-lived ones.</li>
<li><strong>Use Soft&#x2F;Weak References</strong>: They allow the referenced objects to be garbage-collected when necessary.</li>
<li><strong>Optimize Data Structures</strong>: Use memory-efficient data structures and algorithms.</li>
<li><strong>Stream Large Files</strong>: When dealing with large files, use streaming APIs.</li>
<li><strong>Limit Thread Creation</strong>: Each thread consumes memory, so create threads judiciously.</li>
</ol>
<h1 id="OutOfMemory-vs-StackOverflow-error"><a href="#OutOfMemory-vs-StackOverflow-error" class="headerlink" title="OutOfMemory vs. StackOverflow error"></a>OutOfMemory vs. StackOverflow error</h1><p><code>OutOfMemory</code>: JVM can’t allocate memory for a new object.</p>
<p><code>StackOverflow</code>: Program recurses too deeply, exceeding stack limit.</p>
<h1 id="Deep-copy-vs-shallow-copy"><a href="#Deep-copy-vs-shallow-copy" class="headerlink" title="Deep copy vs. shallow copy"></a>Deep copy vs. shallow copy</h1><p><strong>A shallow copy</strong> creates a new object and inserts a reference to the original object into it.</p>
<p><strong>A deep copy</strong> duplicates everything, creating fully independent objects, ensuring changes to the copy do not affect the original.</p>
<h1 id="Create-a-thread-and-implement-multi-threads"><a href="#Create-a-thread-and-implement-multi-threads" class="headerlink" title="Create a thread and implement multi-threads"></a>Create a thread and implement multi-threads</h1><p>方法 1: Extending the <code>Thread</code> class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadExample</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadExample</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadExample</span>();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 2: 1. Implementing the <code>Runnable</code> interface.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Thread is running&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 3: 1. Implementing the <code>Callable</code> interface and using <code>FutureTask</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallableExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Callable&lt;String&gt; callable = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread is running.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result from callable&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法4: Use <code>ExecutorService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        executorService.submit(() -&gt; System.out.println(<span class="string">&quot;Thread created by using ExecutorService.&quot;</span>));</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="runnable-vs-callable"><a href="#runnable-vs-callable" class="headerlink" title="runnable vs callable"></a>runnable vs callable</h1><p><code>Runnable</code> cannot return a result or throw checked exceptions, while <code>Callable</code> can do both and its tasks can return a <code>Future</code> object.</p>
<h1 id="run-and-start"><a href="#run-and-start" class="headerlink" title="run() and start()"></a>run() and start()</h1><p><code>start()</code> initiates a new thread, calling <code>run()</code> internally. <code>run()</code> executes in the current thread, without starting a new one.</p>
<h1 id="Do-you-know-any-lock"><a href="#Do-you-know-any-lock" class="headerlink" title="Do you know any lock"></a>Do you know any lock</h1><p><code>ReentrantLock</code>, <code>ReentrantReadWriteLock</code>, and <code>StampedLock</code>.</p>
<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><p><code>ReentrantLock</code> is a tool that lets threads safely access the same resource multiple times. It offers more control compare to the basic <code>synchronized</code> approach, including options for timed waits and choosing if the lock should be fair to all threads.</p>
<p>scenario:<br>For example, in a program where threads need to lock the same resource multiple times without getting stuck, or when you want to make sure a lock is always released correctly using a try-finally block.<br>imagine you’re transferring money from one account to another. Using a ReentrantLock is like having a special key to access both accounts safely. Only the person with the key (in this case, the transaction process) can check and move the money.</p>
<h1 id="Talk-about-multithreading-you-used-in-your-project"><a href="#Talk-about-multithreading-you-used-in-your-project" class="headerlink" title="Talk about multithreading you used in your project"></a>Talk about multithreading you used in your project</h1><p>In a recent project, I implemented a file processing system where multiple threads were used to read, process, and write data concurrently. This was achieved using Java’s <code>ExecutorService</code> and <code>Future</code> for task submission and handling results. The use of multithreading significantly improved the system’s performance by fully utilizing the CPU and reducing the overall processing time.</p>
<h1 id="difference-between-the-process-and-thread"><a href="#difference-between-the-process-and-thread" class="headerlink" title="difference between the process and thread"></a>difference between the process and thread</h1><p>A process is an independent program execution with its own memory space.  A thread is a lightweight process that shares the same memory space of its parent process but can execute independently.</p>
<h1 id="Have-you-done-any-work-with-atomics"><a href="#Have-you-done-any-work-with-atomics" class="headerlink" title="Have you done any work with atomics?"></a>Have you done any work with atomics?</h1><p>Yes, I have used Java atomics like AtomicInteger and AtomicLong for thread-safe operations on single variables without synchronization</p>
<h1 id="What-is-volatile-keyword-and-where-is-it-used"><a href="#What-is-volatile-keyword-and-where-is-it-used" class="headerlink" title="What is volatile keyword and where is it used?"></a>What is volatile keyword and where is it used?</h1><p>The <code>volatile</code> keyword in Java ensures a variable is directly read from and written to main memory, ensuring visibility of its changes across threads. It is used for variables that are accessed and modified by multiple threads, like flags, without requiring synchronization for visibility.</p>
<h1 id="What-is-synchronized"><a href="#What-is-synchronized" class="headerlink" title="What is synchronized"></a>What is synchronized</h1><p>The <code>synchronized</code> keyword in Java ensures that a method or block can only be executed by one thread at a time, providing thread safety.</p>
<h1 id="How-can-volatile-make-sure-the-thread-will-get-the-latest-result"><a href="#How-can-volatile-make-sure-the-thread-will-get-the-latest-result" class="headerlink" title="How can volatile make sure the thread will get the latest result?"></a>How can volatile make sure the thread will get the latest result?</h1><p>Because it reading from and writing directly to main memory, bypassing the thread cache.</p>
<h1 id="How-does-thread-communicate-with-each-other-wait-and-notify"><a href="#How-does-thread-communicate-with-each-other-wait-and-notify" class="headerlink" title="How does thread communicate with each other? (wait and notify)"></a>How does thread communicate with each other? (wait and notify)</h1><p>The <strong>wait()</strong> method causes a thread to pause until another thread calls notify() or notifyAll() on the same object.<br>The <strong>notify()</strong> method wakes up a single waiting thread, while <strong>notifyAll()</strong> wakes up all waiting threads on the object’s monitor. </p>
<p>This mechanism allows threads to coordinate based on condition changes or resource availability.</p>
<h1 id="Producer-Consumer-Aysn-Mechanism"><a href="#Producer-Consumer-Aysn-Mechanism" class="headerlink" title="Producer &amp; Consumer Aysn Mechanism?"></a>Producer &amp; Consumer Aysn Mechanism?</h1><p>In Java, the Producer-Consumer pattern can be implemented using:</p>
<ol>
<li><p><strong><code>wait()</code> and <code>notify()</code></strong>: Producers and consumers synchronize on a shared object, using <code>wait()</code> to pause on full&#x2F;empty conditions and <code>notify()</code> to resume the opposite thread.</p>
</li>
<li><p><strong><code>BlockingQueue</code></strong>: A thread-safe collection that automatically manages synchronization, with producers using <code>put()</code> to add items (waiting if full) and consumers using <code>take()</code> to remove items (waiting if empty).</p>
</li>
</ol>
<h1 id="What-is-the-deadlock"><a href="#What-is-the-deadlock" class="headerlink" title="What is the deadlock?"></a>What is the deadlock?</h1><p>Deadlock is a condition where two or more threads are waiting indefinitely for each other to release resources they need, resulting in none of the threads being able to proceed.</p>
<h1 id="thread-join"><a href="#thread-join" class="headerlink" title="thread join()"></a>thread join()</h1><p>The join() method in Java allows the current thread to wait for another thread’s completion. </p>
<h1 id="What-is-Asynchronized-in-multi-threading"><a href="#What-is-Asynchronized-in-multi-threading" class="headerlink" title="What is Asynchronized in multi-threading?"></a>What is Asynchronized in multi-threading?</h1><p>Asynchronized in multi-threading refers to executing tasks concurrently across multiple threads without one waiting for another, enhancing application performance by parallelizing operations.</p>
<h1 id="Internal-data-structure-of-HashMap"><a href="#Internal-data-structure-of-HashMap" class="headerlink" title="Internal data structure of HashMap"></a>Internal data structure of HashMap</h1><p>The internal data structure of a <code>HashMap</code> in Java combines an array with linked lists or balanced trees for collision handling. Entries are stored in array slots (buckets) based on their keys’ hash codes. </p>
<p>In case of collisions, entries are linked into a list or tree at the same array index. This setup allows efficient storage and retrieval, aiming for O(1) time complexity for <code>get</code> and <code>put</code> operations.</p>
<h1 id="Java-hashmap-implementation-hashcode-chain-vs-red-black-tree"><a href="#Java-hashmap-implementation-hashcode-chain-vs-red-black-tree" class="headerlink" title="Java hashmap implementation (hashcode chain vs red black tree)"></a>Java hashmap implementation (hashcode chain vs red black tree)</h1><p>Java’s <code>HashMap</code> initially handles collisions using linked lists(hashcode chain). From Java 8, for buckets with more than 8 items, it switches to red-black trees, improving search from O(n) to O(log n) for high collision scenarios. </p>
<h1 id="HashMap-and-TreeMap-and-Hashtable"><a href="#HashMap-and-TreeMap-and-Hashtable" class="headerlink" title="HashMap and TreeMap and Hashtable"></a>HashMap and TreeMap and Hashtable</h1><ul>
<li><strong>HashMap</strong>: Unsynchronized, allows one null key and multiple null values, unordered.</li>
<li><strong>TreeMap</strong>: Sorted by natural order or Comparator, no null keys if natural ordering is used, unsynchronized.</li>
<li><strong>Hashtable</strong>: Synchronized, no null keys or values, slower, considered legacy.</li>
</ul>
<h1 id="When-using-HashMap-in-multi-threading-what-will-happen-How-to-avoid-it"><a href="#When-using-HashMap-in-multi-threading-what-will-happen-How-to-avoid-it" class="headerlink" title="When using HashMap in multi-threading, what will happen? How to avoid it?"></a>When using HashMap in multi-threading, what will happen? How to avoid it?</h1><p>In a multi-threaded environment, using HashMap can lead to data inconsistency and ConcurrentModificationException. To avoid this, use <code>ConcurrentHashMap</code> for better thread safety and performance.</p>
<h1 id="What-is-race-condition"><a href="#What-is-race-condition" class="headerlink" title="What is race condition?"></a>What is race condition?</h1><p>A race condition occurs when multiple operations access shared data concurrently and the outcome depends on the order of execution, leading to unpredictable results.</p>
<h1 id="Time-complexity-of-HashMap"><a href="#Time-complexity-of-HashMap" class="headerlink" title="Time complexity of HashMap"></a>Time complexity of HashMap</h1><p>Average time complexity for HashMap operations like get and put is O(1), but can degrade to O(n) in worst-case scenarios due to hash collisions.</p>
<h1 id="How-does-ConcurrentHashMap-works"><a href="#How-does-ConcurrentHashMap-works" class="headerlink" title="How does ConcurrentHashMap works?"></a>How does ConcurrentHashMap works?</h1><p>It achieves its thread safety through a combination of fine-grained locking and lock-free mechanisms:</p>
<ul>
<li><strong>Lock-Free Reading</strong>: It allows concurrent read operations without locking, using volatile variables to ensure visibility.</li>
<li><strong>Fine-Grained Locking for Writes</strong>: For write operations, it employs a fine-grained locking strategy. Instead of locking the whole map, it uses Compare-and-Swap (CAS) operations for updating nodes, reducing write contention.</li>
<li><strong>Dynamic Tree Bins</strong>: To maintain efficient access times even in cases of high hash collisions, bins can dynamically transform from linked lists to balanced trees (red-black trees), keeping the worst-case access time at O(log n).</li>
</ul>
<h1 id="HashMap-vs-LinkedHashMap"><a href="#HashMap-vs-LinkedHashMap" class="headerlink" title="HashMap vs. LinkedHashMap"></a>HashMap vs. LinkedHashMap</h1><p><code>HashMap</code> offers no order for its entries, while <code>LinkedHashMap</code> maintains insertion order at a slight memory cost due to an internal doubly-linked list.</p>
<h1 id="How-to-handle-concurrent-modification-exceptions"><a href="#How-to-handle-concurrent-modification-exceptions" class="headerlink" title="How to handle concurrent modification exceptions?"></a>How to handle concurrent modification exceptions?</h1><ol>
<li>Use concurrent collections like <code>ConcurrentHashMap</code> or <code>CopyOnWriteArrayList</code>.</li>
<li>Synchronize code blocks that modify collections.</li>
<li>Use the iterator’s <code>remove()</code> method during iteration.</li>
<li>For read-only iteration, use for-each loops or Streams API.</li>
<li>Convert the collection to an array or make a copy for safe iteration.</li>
</ol>
<h1 id="How-do-you-deal-with-large-amout-of-data-works"><a href="#How-do-you-deal-with-large-amout-of-data-works" class="headerlink" title="How do you deal with large amout of data&#x2F;works?"></a>How do you deal with large amout of data&#x2F;works?</h1><p>To manage large data&#x2F;workloads:</p>
<ol>
<li><strong>Kafka</strong>: Handles high-throughput data streams for real-time processing.</li>
<li><strong>Stored Procedures</strong>: Optimizes database interactions, reducing network latency.</li>
<li><strong>ExecutorService</strong>: Manages concurrent tasks efficiently with thread pools.</li>
<li><strong>Cache</strong>: Improves performance by storing frequently accessed data.</li>
</ol>
<h1 id="How-does-Java-code-compile-and-run-JVM"><a href="#How-does-Java-code-compile-and-run-JVM" class="headerlink" title="How does Java code compile and run? -&gt; JVM"></a>How does Java code compile and run? -&gt; JVM</h1><p>Java code is compiled into bytecode by the Java compiler, which is then run on the JVM. The JVM interprets or compiles the bytecode into machine code, enabling it to run on any platform that has a compatible JVM.</p>
<h1 id="How-many-ways-to-traverse-a-list"><a href="#How-many-ways-to-traverse-a-list" class="headerlink" title="How many ways to traverse a list?"></a>How many ways to traverse a list?</h1><ol>
<li>For loop</li>
<li>Enhanced for loop (for-each loop)</li>
<li>While loop with an iterator</li>
<li>Stream API (Java eight and above)</li>
</ol>
<h1 id="List-some-immutable-objects-in-Java"><a href="#List-some-immutable-objects-in-Java" class="headerlink" title="List some immutable objects in Java"></a>List some immutable objects in Java</h1><ul>
<li>String</li>
<li>Integer</li>
<li>Float</li>
<li>Long</li>
<li>Double</li>
<li>Boolean</li>
</ul>
<h1 id="Composition-vs-Association"><a href="#Composition-vs-Association" class="headerlink" title="Composition vs. Association"></a>Composition vs. Association</h1><ul>
<li><p><strong>Association</strong>: A relationship where one class uses or interacts with another, without implying ownership.</p>
</li>
<li><p><strong>Composition</strong>: A specific type of association where one class owns another class, controlling its lifecycle and implying a part-whole relationship.</p>
</li>
</ul>
<h1 id="What-is-the-size-of-the-segment"><a href="#What-is-the-size-of-the-segment" class="headerlink" title="What is the size of the segment?"></a>What is the size of the segment?</h1><p>The size of a segment in Java’s memory model varies by JVM implementation and configuration, typically ranging from 1 to 32 MB in the G1 garbage collector.</p>
<h1 id="How-to-make-class-immutable"><a href="#How-to-make-class-immutable" class="headerlink" title="How to make class immutable?"></a>How to make class immutable?</h1><p>To make a class immutable in Java:</p>
<ol>
<li>Declare the class as <code>final</code>.</li>
<li>Mark all fields <code>private</code> and <code>final</code>.</li>
<li>Do not provide setter methods.</li>
<li>Perform deep copies of mutable fields in the constructor.</li>
<li>Return copies of mutable objects in getter methods.</li>
</ol>
<h1 id="How-does-the-front-end-communicate-with-the-back-end"><a href="#How-does-the-front-end-communicate-with-the-back-end" class="headerlink" title="How does the front-end communicate with the back-end?"></a>How does the front-end communicate with the back-end?</h1><p>The front-end communicates with the back-end via HTTP requests and responses, using APIs to exchange data typically in JSON or XML format.</p>
<h1 id="Talk-about-factory-design-pattern"><a href="#Talk-about-factory-design-pattern" class="headerlink" title="Talk about factory design pattern"></a>Talk about factory design pattern</h1><p>The Factory Design Pattern is a creational pattern that encapsulates object creation by allowing objects to be created without specifying the exact class type. It involves a factory method that returns objects of a superclass type but instantiated from one of several subclasses based on input parameters, promoting loose coupling and flexibility in object creation. The pattern includes interfaces or abstract classes as Products, their ConcreteProduct implementations, a Creator interface or abstract class, and ConcreteCreator classes that implement the factory method to instantiate and return specific products.</p>
<h1 id="Talk-about-observer-design-pattern"><a href="#Talk-about-observer-design-pattern" class="headerlink" title="Talk about observer design pattern"></a>Talk about observer design pattern</h1><p>The Observer design pattern enables an object, known as the subject, to notify other objects, known as observers, of state changes. It is used for creating event-driven systems, allowing for loose coupling between the subject and its observers.</p>
<h1 id="What-if-you-don’t-define-the-serialVersionUID-What-if-you-remove-it"><a href="#What-if-you-don’t-define-the-serialVersionUID-What-if-you-remove-it" class="headerlink" title="What if you don’t define the serialVersionUID? What if you remove it?"></a>What if you don’t define the serialVersionUID? What if you remove it?</h1><p>If you don’t define <code>serialVersionUID</code>, Java generates one at runtime based on class details. Removing it has the same effect. This can cause deserialization issues if the class changes, leading to <code>InvalidClassException</code>. Defining <code>serialVersionUID</code> explicitly ensures compatibility across class versions.</p>
<h1 id="What-caused-memory-leak-How-to-detect-it"><a href="#What-caused-memory-leak-How-to-detect-it" class="headerlink" title="What caused memory leak? How to detect it?"></a>What caused memory leak? How to detect it?</h1><p>Memory leaks in Java are often caused by unreleased object references. Tools like VisualVM and Eclipse Memory Analyzer can help detect them by analyzing heap dumps and monitoring memory usage.</p>
<h1 id="Map-vs-Flat-map"><a href="#Map-vs-Flat-map" class="headerlink" title="Map vs. Flat map"></a>Map vs. Flat map</h1><p><code>Map</code> transforms each stream element with a function. <code>Flat map</code> also transforms but then flattens the resulting streams into one.</p>
<h1 id="sleep-vs-wait"><a href="#sleep-vs-wait" class="headerlink" title="sleep() vs. wait()"></a>sleep() vs. wait()</h1><p><code>sleep()</code> pauses a thread without releasing locks for a time. <code>wait()</code> pauses a thread, releases its locks, and waits for <code>notify()</code> or a timeout.</p>
<h1 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h1><p><code>PreparedStatement</code> is a Java interface for executing SQL queries with parameters. It improves performance and security by allowing repeated execution of precompiled statements with dynamic values, preventing SQL injection.</p>
<h1 id="why-string-is-immutable"><a href="#why-string-is-immutable" class="headerlink" title="why string is immutable?"></a>why string is immutable?</h1><p>参见PDF</p>
<p>String is immutable for several reasons:</p>
<ol>
<li><p><strong>String Pool</strong>: Enables sharing of strings to save memory. Immutability ensures reference integrity, preventing unintended changes.</p>
</li>
<li><p><strong>Security</strong>: Protects critical data like network details and credentials from modification, enhancing application security.</p>
</li>
<li><p><strong>Multi-threading</strong>: Immutability makes strings thread-safe without needing synchronization, facilitating safer sharing across threads.</p>
</li>
<li><p><strong>Caching</strong>: Immutable strings have consistent hashcodes, ideal for caching and use as map keys, improving performance.</p>
</li>
<li><p><strong>Class Loaders</strong>: Ensures reliable class loading by preventing alteration of class identifiers, contributing to application security.</p>
</li>
</ol>
<h1 id="JDK-and-JVM"><a href="#JDK-and-JVM" class="headerlink" title="JDK and JVM"></a>JDK and JVM</h1><p>JDK is a development environment for building Java apps, including JVM, compiler, and libraries. JVM runs Java bytecode across platforms.</p>
<h1 id="object-lifecycle"><a href="#object-lifecycle" class="headerlink" title="object lifecycle"></a>object lifecycle</h1><ol>
<li><strong>Creation</strong>: Objects are created with <code>new</code>, initializing them via constructors.</li>
<li><strong>Use</strong>: Objects are utilized for their fields and methods.</li>
<li><strong>Inaccessible</strong>: Objects without references become eligible for garbage collection.</li>
<li><strong>Destruction</strong>: Garbage collection reclaims memory, destroying the object.</li>
</ol>
<h1 id="What-testing-framework-are-you-using-in-your-project"><a href="#What-testing-framework-are-you-using-in-your-project" class="headerlink" title="What testing framework are you using in your project?"></a>What testing framework are you using in your project?</h1><p>We are using JUnit for unit testing, Mockito for mocking dependencies, and TestNG for more complex test scenarios.</p>
<h1 id="What-is-Mockito"><a href="#What-is-Mockito" class="headerlink" title="What is Mockito"></a>What is Mockito</h1><p>It is for creating and configuring mock objects in unit tests. It is use to simulate the behavior of real-world objects</p>
<h1 id="What-is-the-limitation-of-Mockito"><a href="#What-is-the-limitation-of-Mockito" class="headerlink" title="What is the limitation of Mockito"></a>What is the limitation of Mockito</h1><p>Mockito cannot mock final classes or methods, private methods, and static methods directly. </p>
<h1 id="Life-cycle-of-Junit-test"><a href="#Life-cycle-of-Junit-test" class="headerlink" title="Life cycle of Junit test"></a>Life cycle of Junit test</h1><p>@BeforeAll, @BeforeEach, @AfterEach and @AfterAll</p>
<h1 id="mocking-vs-stubbing"><a href="#mocking-vs-stubbing" class="headerlink" title="mocking vs stubbing"></a>mocking vs stubbing</h1><p>Stubbing provides fixed responses from dependencies. </p>
<p>Mocking also verifies interactions with those dependencies.</p>
<h1 id="TestNG-vs-junit"><a href="#TestNG-vs-junit" class="headerlink" title="TestNG vs junit"></a>TestNG vs junit</h1><p>TestNG offers advanced features like execution order, parallel testing, and grouping, ideal for complex tests. </p>
<p>JUnit is simpler, great for unit testing, and widely adopted. </p>
<p>So, use TestNG for detailed control; use JUnit for straightforward scenarios.</p>
<h1 id="Functional-test-Integrtion-test-Unit-test"><a href="#Functional-test-Integrtion-test-Unit-test" class="headerlink" title="Functional test &amp; Integrtion test &amp; Unit test"></a>Functional test &amp; Integrtion test &amp; Unit test</h1><p>Functional testing checks software matches requirements. Integration testing ensures parts work together. Unit testing verifies individual components.</p>
<h1 id="Junit-how-to-write-a-test"><a href="#Junit-how-to-write-a-test" class="headerlink" title="Junit, how to write a test"></a>Junit, how to write a test</h1><ol>
<li><strong>Add JUnit dependency</strong> in Maven</li>
<li><strong>Create a test class</strong> in <code>src/test/java</code>.</li>
<li><strong>Import JUnit</strong> with <code>import org.junit.jupiter.api.Test;</code>.</li>
<li><strong>Write test methods</strong> annotated with <code>@Test</code>, use assertions like <code>assertEquals()</code> for validation.</li>
<li><strong>Run the test</strong> using IDE or build tool.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">5</span>, <span class="keyword">new</span> <span class="title class_">Calculator</span>().add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="difference-between-a-relational-database-and-a-non-relational-database-nosql-vs-sql"><a href="#difference-between-a-relational-database-and-a-non-relational-database-nosql-vs-sql" class="headerlink" title="difference between a relational database and a non-relational database? nosql vs sql"></a>difference between a relational database and a non-relational database? nosql vs sql</h1><p>Relational databases are structured and use SQL. Non-relational (NoSQL) databases are flexible and store unstructured data.</p>
<h1 id="How-do-you-debug-when-sql-queries-very-slow"><a href="#How-do-you-debug-when-sql-queries-very-slow" class="headerlink" title="How do you debug when sql queries very slow"></a>How do you debug when sql queries very slow</h1><ol>
<li>Use the <strong>Slow Query Log</strong> to find slow queries.</li>
<li>Apply <strong><code>EXPLAIN</code></strong> to analyze query execution plans.</li>
<li>Optimize <strong>indexes</strong> based on the plan.</li>
<li><strong>Refactor</strong> queries for efficiency.</li>
<li>Ensure <strong>database statistics</strong> are up to date.</li>
<li><strong>Profile</strong> application and database performance.</li>
<li>Implement <strong>caching</strong> for common queries.</li>
</ol>
<p>i can do indexing &#x2F; sharding</p>
<h1 id="LEFT-JOIN-RIGHT-JOIN"><a href="#LEFT-JOIN-RIGHT-JOIN" class="headerlink" title="LEFT JOIN &amp; RIGHT JOIN"></a>LEFT JOIN &amp; RIGHT JOIN</h1><p>A LEFT JOIN gives you everything from the first table plus any matches from the second table. If there’s no match, you still get the first table’s data with blanks for the second table.</p>
<p>A RIGHT JOIN gives you everything from the second table plus any matches from the first table. If there’s no match, you still get the second table’s data with blanks for the first table.</p>
<h1 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h1><p>Cassandra is a distributed NoSQL database designed for handling large amounts of data across many commodity servers</p>
<h2 id="Which-was-better-for-horizontally-scaling"><a href="#Which-was-better-for-horizontally-scaling" class="headerlink" title="Which was better for horizontally scaling?"></a>Which was better for horizontally scaling?</h2><p>nosql database</p>
<h1 id="How-to-populate-the-cache-redisTemplate"><a href="#How-to-populate-the-cache-redisTemplate" class="headerlink" title="How to populate the cache? -&gt; redisTemplate"></a>How to populate the cache? -&gt; redisTemplate</h1><p>To populate a cache using <code>redisTemplate</code> in Java, you would typically perform the following steps:</p>
<ol>
<li>Autowire the <code>RedisTemplate&lt;String, Object&gt;</code> bean into your class.</li>
<li>Use the <code>opsForValue().set(key, value)</code> method to store data in Redis.</li>
</ol>
<p>Example code snippet:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheData</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This method will store the <code>value</code> object associated with the <code>key</code> in Redis, effectively populating the cache.</p>
]]></content>
      <categories>
        <category>Java Interview</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试——Kotlin</title>
    <url>//java-interview/kotlin/</url>
    <content><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>在构造方法使用<code>var</code>&#x2F;<code>val</code>&#x2F;以及不使用的区别：</p>
<ul>
<li><code>var</code> 相当于同时自动生成 getter 和 setter 方法;</li>
<li><code>val</code> 只自动生成 getter 方法;</li>
<li>不写的话,就没有自动生成的 getter 和 setter。</li>
</ul>
<p>注意，Kotlin的构造方法是直接在class后面写括号，这点和Java不同。也可以给构造函数写default参数，比如下面这样：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String = <span class="string">&quot;&quot;</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">18</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person()</span><br><span class="line"></span><br><span class="line">    println(person.name)</span><br><span class="line">    println(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里<code>class Person</code>后面就是构造函数的参数了，只要再写一个<code>=</code>就是设置default参数，这样下次创建对象的时候，即使是空的，也可以get到default的参数。</p>
]]></content>
      <categories>
        <category>Java Interview</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试——Spring Concepts</title>
    <url>//java-interview/spring/</url>
    <content><![CDATA[<h1 id="Why-do-you-use-Spring-Boot-Benefits-of-Spring-Boot-diffrenece-of-Spring-and-Spring-boot"><a href="#Why-do-you-use-Spring-Boot-Benefits-of-Spring-Boot-diffrenece-of-Spring-and-Spring-boot" class="headerlink" title="Why do you use Spring Boot? &#x2F; Benefits of Spring Boot&#x2F; diffrenece of Spring and Spring boot"></a>Why do you use Spring Boot? &#x2F; Benefits of Spring Boot&#x2F; diffrenece of Spring and Spring boot</h1><p>Spring is a powerful framework for building Java applications, providing features like dependency injection and aspect-oriented programming. However, it requires more manual configuration to get started.</p>
<p>Spring Boot, building on Spring, simplifies this process. It basically sets things up for you by guessing what you need based on what you’re trying to do, and it even has its own server ready to go. So, with Spring Boot, you spend less time on setup and more on actually building your app</p>
<h1 id="Command-to-run-a-spring-boot-application"><a href="#Command-to-run-a-spring-boot-application" class="headerlink" title="Command to run a spring boot application"></a>Command to run a spring boot application</h1><p>use the command &#96;mvn spring-boot:run</p>
<h1 id="For-Spring-Boot-how-do-I-use-another-server-such-as-WebLogic-instead-of-the-embedded-Tomcat-server"><a href="#For-Spring-Boot-how-do-I-use-another-server-such-as-WebLogic-instead-of-the-embedded-Tomcat-server" class="headerlink" title="For Spring Boot, how do I use another server such as WebLogic instead of the embedded Tomcat server?"></a>For Spring Boot, how do I use another server such as WebLogic instead of the embedded Tomcat server?</h1><p>To use WebLogic instead of the embedded Tomcat server in Spring Boot, follow these steps:</p>
<ol>
<li><p>Exclude the Tomcat starter from your <code>pom.xml</code> or <code>build.gradle</code> file. For Maven, add:</p>
</li>
<li><p>Add your WebLogic dependencies to your build file. </p>
</li>
<li><p>Create a WAR file instead of a JAR file. Ensure your application class extends <code>SpringBootServletInitializer</code> and overrides the <code>configure</code> method, which allows Spring Boot to run in a servlet container.</p>
</li>
<li><p>Deploy the WAR file to your WebLogic server. You can do this through the WebLogic administration console or by using the WebLogic deployment tools.</p>
</li>
</ol>
<h1 id="What-is-the-IOC"><a href="#What-is-the-IOC" class="headerlink" title="What is the IOC?"></a>What is the IOC?</h1><p>Inversion of Control (IOC) is a principle where the control of object creation and lifecycle is transferred to a container or framework, enabling loose coupling and easier management of components.</p>
<h1 id="What-is-Dependency-Injection"><a href="#What-is-Dependency-Injection" class="headerlink" title="What is Dependency Injection?"></a>What is Dependency Injection?</h1><p>Dependency Injection is a design pattern used to implement IoC (Inversion of Control), where the creation and binding of the dependencies are not done by the class itself but by an external entity. It allows a class’s dependencies to be injected at runtime rather than the class constructing them itself, promoting loose coupling and making the code more modular, easier to test, and maintain.<br><code>@Autowired</code> is an annotation in Spring Framework that is used for dependency injection</p>
<h1 id="Different-ways-of-Dependency-Injection"><a href="#Different-ways-of-Dependency-Injection" class="headerlink" title="Different ways of Dependency Injection"></a>Different ways of Dependency Injection</h1><p>Dependency Injection (DI) in Java can be performed in several ways:</p>
<ol>
<li><strong>Constructor Injection</strong>: Dependencies are provided through a class constructor.</li>
<li><strong>Setter Injection</strong>: Dependencies are set through setter methods.</li>
<li><strong>Field Injection</strong>: Dependencies are injected directly into the class fields.</li>
<li><strong>Method Injection</strong>: Dependencies are provided through a method other than a setter method.</li>
</ol>
<h1 id="When-there-is-circular-dependency-use-which-type-of-Injection-Setter-based-Injection-vs-Constructor-based"><a href="#When-there-is-circular-dependency-use-which-type-of-Injection-Setter-based-Injection-vs-Constructor-based" class="headerlink" title="When there is circular dependency, use which type of Injection? &#x2F; Setter based Injection vs. Constructor based"></a>When there is circular dependency, use which type of Injection? &#x2F; Setter based Injection vs. Constructor based</h1><p>Use Setter Injection or Field Injection to resolve circular dependencies in Spring. This allows Spring to first instantiate all beans and then set the dependencies, breaking the cycle.</p>
<h1 id="Constructor-based-injection-vs-Setter-based-injection-when-to-use-which"><a href="#Constructor-based-injection-vs-Setter-based-injection-when-to-use-which" class="headerlink" title="Constructor based injection vs. Setter based injection, when to use which?"></a>Constructor based injection vs. Setter based injection, when to use which?</h1><p>Constructor-based injection is ideal when:</p>
<ol>
<li>Ensuring mandatory dependencies are provided when creating an instance.</li>
<li>Creating immutable objects.</li>
<li>Working with dependencies that are required for the object’s functionality.</li>
</ol>
<p>Setter-based injection is preferable when:</p>
<ol>
<li>Dealing with optional dependencies.</li>
<li>Changing dependencies at runtime or for configuration purposes.</li>
<li>Working in frameworks that require default constructors.</li>
</ol>
<h1 id="What-are-the-differences-between-RequestParam-and-PathVariable"><a href="#What-are-the-differences-between-RequestParam-and-PathVariable" class="headerlink" title="What are the differences between @RequestParam and @PathVariable?"></a>What are the differences between @RequestParam and @PathVariable?</h1><p><code>@RequestParam</code> extracts query parameters from the URL and are formatted as key-value pairs. It’s commonly used for optional parameters or when dealing with form submissions.</p>
<p><code>@PathVariable</code> extracts values from the URL path. It’s typically to identify specific resources.</p>
<h1 id="Authentication-vs-Authorization"><a href="#Authentication-vs-Authorization" class="headerlink" title="Authentication vs. Authorization"></a>Authentication vs. Authorization</h1><p>Authentication verifies user identity; authorization determines access rights post-authentication.</p>
<h1 id="What-is-JWT-and-why-we-need-it"><a href="#What-is-JWT-and-why-we-need-it" class="headerlink" title="What is JWT and why we need it?"></a>What is JWT and why we need it?</h1><p>JWT, short for JSON Web Token, is a secure way to share info between two parties as a JSON object. It’s made up of three parts: a header, payload, and signature. It used primarily for authentication and authorization.</p>
<h1 id="How-does-JWT-work"><a href="#How-does-JWT-work" class="headerlink" title="How does JWT work?"></a>How does JWT work?</h1><p>When you log in, the server gives you a special token, a JWT, which is like a secure ID card. Your browser keeps this token. Each time you ask the server to do something, your browser shows this token to prove who you are. The server checks the token to make sure it’s legit and then lets you go ahead with what you want to do. It’s a quick and secure way to handle logging in and keeping track of who’s who.</p>
<h1 id="What-is-AOP"><a href="#What-is-AOP" class="headerlink" title="What is AOP"></a>What is AOP</h1><p>Aspect-Oriented Programming (AOP) is a programming paradigm that aims to increase modularity by separating cross-cutting concerns like logging and security, using concepts like aspects, advice, join points, and pointcuts.</p>
<p>To use AOP in Spring Boot, you can follow these steps:</p>
<ol>
<li>Add the Spring AOP dependency in your <code>pom.xml</code> or <code>build.gradle</code> file.</li>
<li>Define an Aspect class annotated with <code>@Aspect</code>.</li>
<li>Inside the Aspect class, define a method and annotate it with <code>@Before</code>, <code>@After</code>, <code>@Around</code>, <code>@AfterReturning</code>, or <code>@AfterThrowing</code> to specify when the advice should be executed in relation to the target method execution.</li>
<li>Use the <code>execution</code> expression within these annotations to define the pointcut, specifying which methods your advice should apply to.</li>
</ol>
<p>Logging:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.yourpackage..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBeforeAllMethods</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before executing method:&quot;</span> + joinPoint.getSignature().toShortString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p>Spring MVC is a module in the Spring Framework for building web applications using the Model-View-Controller pattern, emphasizing separation of concerns and ease of development through Dependency Injection and Inversion of Control.</p>
<h1 id="What-is-front-controller"><a href="#What-is-front-controller" class="headerlink" title="What is front controller?"></a>What is front controller?</h1><p>The Front Controller is a design pattern where a single controller manages all requests in Java web apps, directing them to the right handlers.</p>
<p>The Front Controller in Spring Boot is implemented by the <code>DispatcherServlet</code>, that routes HTTP requests to appropriate handlers, manages control flow, and facilitates view rendering.</p>
<h1 id="What-is-DispatcherServlet"><a href="#What-is-DispatcherServlet" class="headerlink" title="What is DispatcherServlet"></a>What is DispatcherServlet</h1><p>The <code>DispatcherServlet</code> is a front controller in Spring MVC that routes HTTP requests to appropriate handlers, manages control flow, and facilitates view rendering.</p>
<ol>
<li>Tomcat receives the Http Request, and passes the request to DispatcherServlet for processing.</li>
<li>DispatcherServlet queries the HandlerMapper according to the received request.</li>
<li>HandlerMapper finds the corresponding Controller and its method based on the request, and returns the dispatcherServlet.</li>
<li>dispatcherServlet calls the corresponding method of Controller. The method will call service, repository and database.</li>
<li>The return result (ModelAndView) is handed over to the Controller. A view name and a number of key-value pairs constitute the Model.</li>
<li>dispatcherServlet gets the view name and calls view Resolver.</li>
<li>View Resolver gets the corresponding view template, such as list-customers.jsp.</li>
<li>The data in the view template is filled with the data in the model. Then call the View engine to render the view template and generate the HTML.</li>
<li>The HTML is sent to the browser for display, and the response is given to the browser.</li>
</ol>
<p>In summary, the DispatcherServlet acts as the central controller, coordinating the flow between the HandlerMapper, Controller, ViewResolver and View components to handle HTTP requests, invoke business logic, and render the final HTML response back to the client’s web browser.</p>
<h1 id="cookies-vs-session"><a href="#cookies-vs-session" class="headerlink" title="cookies vs session"></a>cookies vs session</h1><p>Cookies store data client-side; sessions store data server-side, linked by a session ID in a cookie.</p>
<h1 id="What-will-happen-after-click-the-URL"><a href="#What-will-happen-after-click-the-URL" class="headerlink" title="What will happen after click the URL?"></a>What will happen after click the URL?</h1><p>After clicking a URL in a Spring Boot application:</p>
<ol>
<li>The request is sent to the server.</li>
<li><code>DispatcherServlet</code> catches the request.</li>
<li>It identifies the controller via <code>HandlerMapping</code>.</li>
<li>The controller method is executed.</li>
<li>Business logic may be processed.</li>
<li>Data is populated into a model.</li>
<li><code>ViewResolver</code> selects the view.</li>
<li>View is rendered and sent back as a response.</li>
</ol>
<h1 id="What-is-the-Hibernate"><a href="#What-is-the-Hibernate" class="headerlink" title="What is the Hibernate"></a>What is the Hibernate</h1><p>Hibernate is ORM tool. It is like a bridge for Java applications that makes it easier to talk to databases. It’s a tool that automatically handles the tedious task of converting Java objects into database commands and back, saving developers a lot of time and effort.</p>
<h1 id="What-is-ORM"><a href="#What-is-ORM" class="headerlink" title="What is ORM"></a>What is ORM</h1><p>ORM is like an interface that defines how to map between objects in code and database tables. Hibernate is a specific implementation of this ORM concept, providing the actual mechanisms and tools to perform the mapping.</p>
<p>ORM, or Object-Relational Mapping, is a technique that allows developers to manage database data using object-oriented programming languages. It automates the <strong>mapping between objects in code and the tables in a relational database</strong>, simplifying data manipulation and retrieval.</p>
<h1 id="What-is-JPA"><a href="#What-is-JPA" class="headerlink" title="What is JPA"></a>What is JPA</h1><p>JPA is a specification for accessing, persisting, and managing data between Java objects and a relational database. Hibernate is an implementation of the JPA specification.</p>
<h1 id="Hibernate-cache-First-level-second-level"><a href="#Hibernate-cache-First-level-second-level" class="headerlink" title="Hibernate cache? First level second level?"></a>Hibernate cache? First level second level?</h1><p>in Hibernate, we’ve got two caches: the First Level Cache and the Second Level Cache. The First Level is like your session’s personal memory. It automatically remembers data for you during your session, so you don’t keep asking the database for the same thing over and over. Then, there’s the Second Level Cache, which is like a shared memory space for all sessions. It’s not on by default; you have to turn it on. This one helps because data that one session fetches can be reused by others, saving even more trips to the database.</p>
<h1 id="What-is-transactions"><a href="#What-is-transactions" class="headerlink" title="What is transactions"></a>What is transactions</h1><p>A transaction is a set of operations executed as a single unit to ensure data integrity and consistency.</p>
<p>With some ACID properties: Atomicity, Consistency, Isolation, and Durability.</p>
<h1 id="What-is-ACID"><a href="#What-is-ACID" class="headerlink" title="What is ACID"></a>What is ACID</h1><p>ACID stands for Atomicity, Consistency, Isolation, and Durability. It is a set of properties that guarantee that database transactions are processed reliably.</p>
<h1 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h1><p>Spring JDBC is a module of the Spring Framework that simplifies database access by reducing repetitive JDBC code through a template-based approach.</p>
<h1 id="Spring-Batch"><a href="#Spring-Batch" class="headerlink" title="Spring Batch"></a>Spring Batch</h1><p>Spring Batch is a framework for developing batch processing applications in Java, offering features like transaction management, chunk processing, and restart capabilities. It is part of the Spring ecosystem, enhancing scalability and maintainability.</p>
<h1 id="What-is-the-difference-between-compnent-service-controller-Configuration"><a href="#What-is-the-difference-between-compnent-service-controller-Configuration" class="headerlink" title="What is the difference between @compnent, @service, @controller, @Configuration"></a>What is the difference between @compnent, @service, @controller, @Configuration</h1><p><code>@Component</code> is a generic annotation for any Spring-managed component. <code>@Service</code> indicates a class is part of the service layer. <code>@Controller</code> marks a class as a web controller, handling HTTP requests. The difference is in their specific use within an application’s architecture. <code>@Configuration</code> is a Spring annotation that denotes a class as a source of bean definitions.</p>
<h1 id="Exception-handle-in-Spring"><a href="#Exception-handle-in-Spring" class="headerlink" title="Exception handle in Spring"></a>Exception handle in Spring</h1><p>In Spring, use <code>@ControllerAdvice</code> for global exception handling and <code>@ExceptionHandler</code> for specific exceptions. For REST, extend <code>ResponseEntityExceptionHandler</code> for global handling with customized responses.</p>
<h1 id="REST-vs-RESTful"><a href="#REST-vs-RESTful" class="headerlink" title="REST vs. RESTful"></a>REST vs. RESTful</h1><p>REST is an architectural style for networked applications using stateless communication and standard HTTP methods. RESTful describes services or APIs that implement this style.</p>
<h1 id="graphql-vs-restapi"><a href="#graphql-vs-restapi" class="headerlink" title="graphql vs restapi"></a>graphql vs restapi</h1><p>GraphQL enables specific data queries and aggregation in one request, while REST API uses fixed endpoints for predefined data structures, often requiring multiple requests for complex data.</p>
<h1 id="Difference-between-Controller-and-RESTController"><a href="#Difference-between-Controller-and-RESTController" class="headerlink" title="Difference between @Controller and @RESTController"></a>Difference between @Controller and @RESTController</h1><p><code>@Controller</code> is a Spring annotation that indicates the class is a Spring MVC controller. It’s used for traditional web applications where the controller methods return a view.</p>
<p><code>@RestController</code> combines <code>@Controller</code> and <code>@ResponseBody</code> annotations, indicating that every method returns a domain object instead of a view. It is for RESTful services, returning data directly.</p>
<h1 id="What-are-HTTP-request-methods"><a href="#What-are-HTTP-request-methods" class="headerlink" title="What are HTTP request methods?"></a>What are HTTP request methods?</h1><p>HTTP request methods are commands that are used by clients (such as web browsers or applications) to communicate with web servers. Each HTTP request method specifies the type of action the client wants the server to perform on a given resource.</p>
<h1 id="Http-status-code"><a href="#Http-status-code" class="headerlink" title="Http status code"></a>Http status code</h1><p>HTTP status codes are like responses from a server telling you how your web request went.</p>
<ul>
<li><p><strong>200 OK</strong>: Successful request.</p>
</li>
<li><p><strong>201 Created</strong>: Resource created.</p>
</li>
<li><p><strong>204 No Content</strong>: Successful, no content returned.</p>
</li>
<li><p><strong>400 Bad Request</strong>: Invalid request syntax.</p>
</li>
<li><p><strong>401 Unauthorized</strong>: Authentication required or failed.</p>
</li>
<li><p><strong>403 Forbidden</strong>: Access denied.</p>
</li>
<li><p><strong>404 Not Found</strong>: Resource not found.</p>
</li>
<li><p><strong>500 Internal Server Error</strong>: Generic server error.</p>
</li>
<li><p><strong>503 Service Unavailable</strong>: Server temporarily unavailable.</p>
</li>
</ul>
<h1 id="post-vs-get"><a href="#post-vs-get" class="headerlink" title="post vs get"></a>post vs get</h1><p>GET retrieves data, using URL parameters, without changing the state. POST submits data for processing, using the request body, potentially changing the state.</p>
<h1 id="post-vs-put"><a href="#post-vs-put" class="headerlink" title="post vs put"></a>post vs put</h1><p><code>PUT</code> is for updating or creating a resource at a specific URL, and is idempotent. <code>POST</code> is for creating a new resource, with the server determining the new URL, and is not idempotent.</p>
<h1 id="put-and-patch"><a href="#put-and-patch" class="headerlink" title="put and patch"></a>put and patch</h1><ul>
<li><code>PUT</code> or <code>PATCH</code> is used to update an existing resource. <code>PUT</code> replaces the entire resource, while <code>PATCH</code> partially updates it.</li>
</ul>
<h1 id="what-is-API"><a href="#what-is-API" class="headerlink" title="what is API?"></a>what is API?</h1><p>APIpplication Programming Interface) is a set of web endpoints that use HTTP methods to communicate between clients and servers</p>
<h1 id="How-does-the-RestTemplate-work"><a href="#How-does-the-RestTemplate-work" class="headerlink" title="How does the RestTemplate work?"></a>How does the RestTemplate work?</h1><p><code>RestTemplate</code> is a tool in Spring for sending HTTP requests easily. You basically set up what you want to send, like the URL and data, and then use methods like <code>getForObject</code> or <code>postForObject</code> to make the call. It automatically turns the response into a Java object for you. It also helps handle errors smoothly and lets you customize it with different settings if needed.</p>
<h1 id="RestTemplate-vs-Kafka"><a href="#RestTemplate-vs-Kafka" class="headerlink" title="RestTemplate vs. Kafka"></a>RestTemplate vs. Kafka</h1><p>RestTemplate is used for synchronous call while Kafka is used for A-synchronous call</p>
<p>RestTemplate is used for synchronous HTTP requests in a client-server architecture, while Kafka is used for asynchronous, high-volume message processing and streaming in a distributed system architecture.</p>
<h1 id="How-do-you-deal-with-the-response-get-from-REST-api-How-to-convert-JSON-Java-Object"><a href="#How-do-you-deal-with-the-response-get-from-REST-api-How-to-convert-JSON-Java-Object" class="headerlink" title="How do you deal with the response get from REST api? &#x2F; How to convert JSON -&gt; Java Object?"></a>How do you deal with the response get from REST api? &#x2F; How to convert JSON -&gt; Java Object?</h1><ol>
<li>Use <code>RestTemplate</code> or <code>WebClient</code> to make the request.</li>
<li>Map the response to a model class.</li>
<li>Process or use the data as needed.</li>
</ol>
<h1 id="Spring-Annotation-did-you-use-in-your-project"><a href="#Spring-Annotation-did-you-use-in-your-project" class="headerlink" title="Spring Annotation did you use in your project?"></a>Spring Annotation did you use in your project?</h1><p>In my project, we extensively used:</p>
<ul>
<li><code>@SpringBootApplication</code> for application entry points.</li>
<li><code>@RestController</code> and <code>@RequestMapping</code> for RESTful services.</li>
<li><code>@Autowired</code> for dependency injection.</li>
<li><code>@Service</code>, <code>@Repository</code>, and <code>@Component</code> for layer specific components.</li>
<li><code>@Configuration</code> and <code>@Bean</code> for configuration.</li>
<li><code>@Value</code> for property injection.</li>
<li><code>@Profile</code> for environment-based configuration.</li>
<li><code>@Transactional</code> for transaction management.</li>
<li><code>@Async</code> and <code>@Scheduled</code> for asynchronous operations and scheduling tasks.</li>
</ul>
<h1 id="What-would-you-do-if-an-API-response-time-is-500ms"><a href="#What-would-you-do-if-an-API-response-time-is-500ms" class="headerlink" title="What would you do if an API response time is 500ms"></a>What would you do if an API response time is 500ms</h1><p>To reduce an API response time of 500ms:</p>
<ol>
<li><strong>Caching</strong>: Implement caching for frequently accessed data.</li>
<li><strong>Database Optimization</strong>: Optimize queries and use indexing.</li>
<li><strong>Asynchronous Processing</strong>: Use async processing for non-critical operations.</li>
<li><strong>Load Balancing</strong>: Distribute traffic across multiple servers.</li>
<li><strong>Code Optimization</strong>: Streamline and optimize the API code.</li>
<li><strong>Monitoring</strong>: Continuously monitor and adjust based on performance metrics.</li>
</ol>
<h1 id="What-is-Bean"><a href="#What-is-Bean" class="headerlink" title="What is Bean?"></a>What is Bean?</h1><p>Bean is an object managed by the Spring IoC container</p>
<ul>
<li>create bean<ul>
<li>use @bean</li>
<li>use xml</li>
</ul>
</li>
</ul>
<h1 id="How-to-let-Spring-create-instance-for-you"><a href="#How-to-let-Spring-create-instance-for-you" class="headerlink" title="How to let Spring create instance for you?"></a>How to let Spring create instance for you?</h1><p>Use the <code>@Component</code> annotation for Spring to auto-detect and create instances, or define beans with <code>@Bean</code> in a configuration class. Inject instances using <code>@Autowired</code>.</p>
<h1 id="What-is-the-Scope-of-a-Bean"><a href="#What-is-the-Scope-of-a-Bean" class="headerlink" title="What is the Scope of a Bean?"></a>What is the Scope of a Bean?</h1><ol>
<li><strong>Singleton</strong>: One instance per container.</li>
<li><strong>Prototype</strong>: New instance on each request.</li>
<li><strong>Request</strong>: One per HTTP request.</li>
<li><strong>Session</strong>: One per HTTP session.</li>
<li><strong>GlobalSession</strong>: One per global session.</li>
<li><strong>WebSocket</strong>: One per WebSocket.</li>
</ol>
<h1 id="Spring-bean-annotation-bean-life-cycle"><a href="#Spring-bean-annotation-bean-life-cycle" class="headerlink" title="Spring bean annotation, bean life cycle"></a>Spring bean annotation, bean life cycle</h1><p>Spring Bean annotations (<code>@Component</code>, <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>) define classes as Spring-managed components.</p>
<p>The Bean Lifecycle in Spring involves:</p>
<ol>
<li><strong>Instantiation</strong>: Creating a bean instance.</li>
<li><strong>Populate properties</strong>: Injecting properties and dependencies.</li>
<li><strong>Initialization</strong>: Custom initialization methods or lifecycle callbacks like <code>InitializingBean</code>‘s <code>afterPropertiesSet</code>.</li>
<li><strong>Use</strong>: The bean is now ready for use within the application.</li>
<li><strong>Destroy</strong>: Cleanup before the bean is destroyed, using methods defined by <code>DisposableBean</code> or custom destroy methods.</li>
</ol>
<h1 id="Difference-between-Component-and-Bean"><a href="#Difference-between-Component-and-Bean" class="headerlink" title="Difference between @Component and @Bean"></a>Difference between @Component and @Bean</h1><p><code>@Component</code> is used at the class level for automatic bean registration</p>
<p><code>@Bean</code> is used at the method level within a <code>@Configuration</code> annotated class to explicitly register and configure beans.”</p>
<h1 id="Component-Scan"><a href="#Component-Scan" class="headerlink" title="Component Scan"></a>Component Scan</h1><p>Component Scan in Spring Boot automatically detects and registers beans marked with annotations like <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, or <code>@Controller</code>, within the package of the main application class and its subpackages. This feature facilitates automatic dependency injection without manual bean registration.</p>
<h1 id="ApplicationContext-vs-BeanFactory"><a href="#ApplicationContext-vs-BeanFactory" class="headerlink" title="ApplicationContext vs. BeanFactory"></a>ApplicationContext vs. BeanFactory</h1><p><code>ApplicationContext</code> extends <code>BeanFactory</code>, adding enhanced features like internationalization, event propagation, and AOP. It eagerly loads beans, whereas The <code>BeanFactory</code> loads beans lazily and is a simpler container that focuses on basic dependency injection.</p>
<h1 id="How-to-inject-bean-when-there-are-two-beans-with-same-type"><a href="#How-to-inject-bean-when-there-are-two-beans-with-same-type" class="headerlink" title="How to inject bean when there are two beans with same type?"></a>How to inject bean when there are two beans with same type?</h1><p>Use <code>@Autowired</code> and <code>@Qualifier(&quot;beanName&quot;)</code> to inject a specific bean among multiple of the same type.</p>
<h1 id="Spring-cache"><a href="#Spring-cache" class="headerlink" title="Spring cache"></a>Spring cache</h1><p>Spring Cache is an abstraction in the Spring framework for transparent cache management, improving performance by reducing database hits. It supports multiple cache stores and provides annotations (@Cacheable, @CacheEvict, @CachePut) for easy cache behavior management at the method level.</p>
<h1 id="SOAP-vs-REST"><a href="#SOAP-vs-REST" class="headerlink" title="SOAP vs. REST"></a>SOAP vs. REST</h1><p>SOAP is a protocol that is XML-based, making it heavier and more verbose, which can lead to larger message sizes and potentially slower processing. It’s designed to handle complex operations and can support stateful interactions if needed. SOAP provides built-in error handling and is considered more secure, which makes it suitable for enterprise-level applications where security and transactional reliability are critical.</p>
<p>On the other hand, REST is an architectural style that typically uses JSON, making it lighter and more efficient for web use. RESTful services are stateless, meaning each request from client to server must contain all the information needed to understand and complete the request. This statelessness simplifies the server architecture and improves scalability and performance. REST is more flexible in terms of formats and easier to work with for web developers, making it popular for web services and APIs.</p>
<p>SOAP is XML based, heavy weighted and carry status while REST is JSON based, light weighted and stateless.</p>
<h1 id="Consume-web-service-in-Java"><a href="#Consume-web-service-in-Java" class="headerlink" title="Consume web service in Java"></a>Consume web service in Java</h1><p>In Spring, use <code>RestTemplate</code>&#x2F;<code>WebClient</code> for REST and <code>WebServiceTemplate</code> for SOAP.</p>
<h2 id="RestTemplate-for-RESTful-Services"><a href="#RestTemplate-for-RESTful-Services" class="headerlink" title="RestTemplate for RESTful Services"></a>RestTemplate for RESTful Services</h2><ul>
<li><strong>Configuration</strong>: Define <code>RestTemplate</code> as a Spring bean for easy autowiring.</li>
<li><strong>Usage</strong>: Inject <code>RestTemplate</code> via autowiring and use its methods (<code>getForObject()</code>, <code>postForObject()</code>, etc.) to interact with RESTful services, handling HTTP requests and parsing responses automatically.</li>
</ul>
<h2 id="WebServiceTemplate-for-SOAP-Services"><a href="#WebServiceTemplate-for-SOAP-Services" class="headerlink" title="WebServiceTemplate for SOAP Services"></a>WebServiceTemplate for SOAP Services</h2><ul>
<li><strong>Configuration</strong>: Similar to <code>RestTemplate</code>, define <code>WebServiceTemplate</code> as a bean.</li>
<li><strong>Usage</strong>: Autowire <code>WebServiceTemplate</code> in your service class. It’s used to send and receive SOAP messages, leveraging methods like <code>marshalSendAndReceive</code> to interact with SOAP endpoints, handling XML request and response marshalling.</li>
</ul>
<h1 id="Controller-vs-RestController-what-did-you-put-in-a-controller-annotations-Follow-up-why-did-you-put-some-keywords-like-add-or-get-in-your-url-is-it-ok-to-put-id-or-quantity-in-the-url-How-about-username-or-password"><a href="#Controller-vs-RestController-what-did-you-put-in-a-controller-annotations-Follow-up-why-did-you-put-some-keywords-like-add-or-get-in-your-url-is-it-ok-to-put-id-or-quantity-in-the-url-How-about-username-or-password" class="headerlink" title="Controller vs. RestController, what did you put in a controller, annotations. Follow up: why did you put some keywords like add or get in your url, is it ok to put id or quantity in the url? How about username or password?"></a>Controller vs. RestController, what did you put in a controller, annotations. Follow up: why did you put some keywords like add or get in your url, is it ok to put id or quantity in the url? How about username or password?</h1><p><code>@Controller</code> is for Spring MVC web pages, returns views. <code>@RestController</code> combines <code>@Controller</code> and <code>@ResponseBody</code>, directly returns data, typically for REST APIs.</p>
<p>while it’s technically possible to include action words like “add” or “get” in URLs, it’s not recommended in RESTful API design because it focuses on actions rather than resources. REST principles favor using HTTP methods (GET, POST, PUT, DELETE) to denote actions on resources, making APIs more intuitive and aligned with web standards.</p>
<p>Including identifiers like ID or quantity in the URL is acceptable and common in RESTful API design, especially as path variables (e.g., <code>/items/123</code> to get an item with ID 123).</p>
<p>However, sensitive information like usernames or passwords should not be included in the URL. URLs can be logged or cached by web servers and browsers, making sensitive information vulnerable to exposure. For transmitting sensitive data, use other methods such as HTTP headers, cookies, or the body of POST requests with secure HTTPS connections.</p>
<h1 id="Explain-the-procedure-of-how-you-implement-a-web-service"><a href="#Explain-the-procedure-of-how-you-implement-a-web-service" class="headerlink" title="Explain the procedure of how you implement a web service"></a>Explain the procedure of how you implement a web service</h1><ol>
<li><p><strong>Create a Spring Boot project</strong> using Spring Initializr with dependencies like Spring Web.</p>
</li>
<li><p><strong>Define domain models</strong> with necessary JPA annotations if interacting with a database.</p>
</li>
<li><p><strong>Implement repository interfaces</strong> for database operations by extending <code>JpaRepository</code> or <code>CrudRepository</code>.</p>
</li>
<li><p><strong>Develop a service layer</strong> to handle business logic using the repositories.</p>
</li>
<li><p><strong>Create a <code>RestController</code></strong> with methods annotated with <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, and <code>@DeleteMapping</code> to handle HTTP requests.</p>
</li>
<li><p><strong>Configure <code>application.properties</code></strong> for server and database settings.</p>
</li>
<li><p><strong>Run the application</strong> with Spring Boot’s embedded server.</p>
</li>
<li><p><strong>Test</strong> the web service using tools like Postman or Swagger.</p>
</li>
</ol>
<h1 id="Different-types-of-request-mapping-methods"><a href="#Different-types-of-request-mapping-methods" class="headerlink" title="Different types of request mapping methods"></a>Different types of request mapping methods</h1><ol>
<li><p><code>@GetMapping</code>: For GET requests.</p>
</li>
<li><p><code>@PostMapping</code>: For POST requests.</p>
</li>
<li><p><code>@PutMapping</code>: For PUT requests.</p>
</li>
<li><p><code>@DeleteMapping</code>: For DELETE requests.</p>
</li>
<li><p><code>@PatchMapping</code>: For PATCH requests.</p>
</li>
</ol>
<h1 id="How-do-you-implement-transaction"><a href="#How-do-you-implement-transaction" class="headerlink" title="How do you implement transaction?"></a>How do you implement transaction?</h1><p>to be done</p>
<p>Use the <code>@Transactional</code> annotation on methods or classes to implement transactions in Spring Boot. Customize transaction behavior with attributes like <code>propagation</code>, <code>isolation</code>, <code>timeout</code>, and <code>readOnly</code>.</p>
<h1 id="When-designing-a-public-API-what-needs-to-be-considered"><a href="#When-designing-a-public-API-what-needs-to-be-considered" class="headerlink" title="When designing a public API, what needs to be considered?"></a>When designing a public API, what needs to be considered?</h1><ol>
<li><p><strong>Consistency:</strong> Uniform naming, parameter order, and error handling.</p>
</li>
<li><p><strong>Simplicity:</strong> Expose minimal necessary endpoints.</p>
</li>
<li><p><strong>Documentation:</strong> Clear, comprehensive with examples.</p>
</li>
<li><p><strong>Versioning:</strong> Implement for backward compatibility.</p>
</li>
<li><p><strong>Security:</strong> Secure access and data.</p>
</li>
<li><p><strong>Performance:</strong> Optimize for speed and efficiency.</p>
</li>
<li><p><strong>Error Handling:</strong> Meaningful messages and standard HTTP codes.</p>
</li>
<li><p><strong>Scalability:</strong> Plan for growing request volumes.</p>
</li>
<li><p><strong>Deprecation Policy:</strong> Clear policy for phasing out old versions.</p>
</li>
<li><p><strong>Feedback Loop:</strong> Encourage user feedback for improvements.</p>
</li>
</ol>
<h1 id="What-is-DevTools"><a href="#What-is-DevTools" class="headerlink" title="What is DevTools?"></a>What is DevTools?</h1><p>DevTools facilitates rapid development by enabling automatic application restarts and live reload features, reducing the need for manual server restarts upon changes.</p>
<h1 id="How-does-service-communicate-with-each-other"><a href="#How-does-service-communicate-with-each-other" class="headerlink" title="How does service communicate with each other?"></a>How does service communicate with each other?</h1><p>Services communicate with each other primarily through REST APIs, where they use HTTP requests to exchange data in formats like JSON or XML. Alternatively, they can use messaging systems like Kafka for asynchronous communication. SOAP-based web services are also used in legacy systems.</p>
<h1 id="security-protocol"><a href="#security-protocol" class="headerlink" title="security protocol"></a>security protocol</h1><p>Java security protocols include SSL&#x2F;TLS, JAAS, JCA, and HTTPS.</p>
<h1 id="What-is-the-security-part-used-for"><a href="#What-is-the-security-part-used-for" class="headerlink" title="What is the security part used for?"></a>What is the security part used for?</h1><p>Spring Boot uses Spring Security for authentication, authorization, and protection against common vulnerabilities like CSRF, session fixation, and clickjacking. It offers a robust security framework for Java applications.</p>
<h1 id="How-to-make-sure-the-security-of-user-request"><a href="#How-to-make-sure-the-security-of-user-request" class="headerlink" title="How to make sure the security of user request?"></a>How to make sure the security of user request?</h1><ol>
<li><p>Use HTTPS for encrypted data transit.</p>
</li>
<li><p>Validate user input to prevent injection attacks.</p>
</li>
<li><p>Implement strong authentication and authorization mechanisms.</p>
</li>
<li><p>Secure APIs with keys and rate limiting.</p>
</li>
<li><p>Apply Content Security Policy (CSP) to block XSS attacks.</p>
</li>
<li><p>Utilize HTTP security headers for additional protection.</p>
</li>
<li><p>Manage sessions securely and enforce session timeouts.</p>
</li>
<li><p>Encrypt sensitive data at rest and manage keys safely.</p>
</li>
<li><p>Regularly update dependencies to fix vulnerabilities.</p>
</li>
<li><p>Enable logging and monitoring for detecting suspicious activities.</p>
</li>
</ol>
<h1 id="How-to-make-sure-of-different-user-security"><a href="#How-to-make-sure-of-different-user-security" class="headerlink" title="How to make sure of different user security?"></a>How to make sure of different user security?</h1><ol>
<li><p><strong>Add Spring Security dependency</strong> to your project.</p>
</li>
<li><p><strong>Extend <code>WebSecurityConfigurerAdapter</code></strong> to create a security configuration class.</p>
</li>
<li><p><strong>Define user roles and authorities</strong> for differentiated access.</p>
</li>
<li><p><strong>Implement <code>UserDetailsService</code></strong> to load user details from a data source.</p>
</li>
<li><p><strong>Configure password encoding</strong> using <code>BCryptPasswordEncoder</code>.</p>
</li>
<li><p><strong>Override <code>configure(HttpSecurity http)</code></strong> to set URL access rules based on user roles.</p>
</li>
<li><p><strong>Use annotations like <code>@PreAuthorize</code></strong> for method-level security.</p>
</li>
<li><p><strong>Enable session management</strong> for secure session handling.</p>
</li>
<li><p><strong>Handle exceptions</strong> for authentication and access denials.</p>
</li>
<li><p><strong>Ensure CSRF protection</strong> is enabled and configure HTTPS for secure data transmission.</p>
</li>
</ol>
<h1 id="How-to-implement-security"><a href="#How-to-implement-security" class="headerlink" title="How to implement security?"></a>How to implement security?</h1><ol>
<li>Adding the Spring Security starter dependency.</li>
<li>Extending <code>WebSecurityConfigurerAdapter</code> and configuring HTTP security to define access rules and authentication methods.</li>
<li>Using <code>AuthenticationManagerBuilder</code> to set up authentication providers, like in-memory authentication, JDBC authentication, or LDAP authentication.</li>
<li>Optionally customizing <code>UserDetailsService</code> for user-specific security data.</li>
<li>Enabling method-level security with annotations like <code>@PreAuthorize</code>.</li>
<li>Configuring CSRF protection and HTTPS to secure the application further.</li>
</ol>
<h1 id="How-to-record-logs"><a href="#How-to-record-logs" class="headerlink" title="How to record logs"></a>How to record logs</h1><p>Java Logs: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogManager.getLogger(MyClass.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;This is an info message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>AOP:</p>
<p>you first add AOP dependencies to your project. Then, create an Aspect class annotated with <code>@Aspect</code> and define pointcuts to specify the join points where logging should be applied, such as methods within a specific package. Inside this class, implement advice methods (like <code>@Before</code>, <code>@After</code>, or <code>@Around</code>) that contain the logging logic. Enable AspectJ auto-proxy in your configuration to process these aspects. Finally, integrate a logging framework to capture and manage the logs generated by your aspect.</p>
<h1 id="What-is-splunk"><a href="#What-is-splunk" class="headerlink" title="What is splunk"></a>What is splunk</h1><p>Splunk is a software that helps you collect and analyze lots of computer-generated data, like log files, making it easy to find information, monitor how systems are running, and analyze data, all presented through charts, reports, and dashboards.</p>
<p>how to use it:</p>
<ol>
<li><strong>Install Splunk</strong>: Choose between Splunk Enterprise or Splunk Cloud.</li>
<li><strong>Add Data</strong>: Collect data from sources like logs, metrics, and events.</li>
<li><strong>Search &amp; Analyze</strong>: Use Splunk’s search language to query and analyze data.</li>
<li><strong>Create Dashboards</strong>: Build dashboards with charts and graphs for insights.</li>
<li><strong>Set Alerts &amp; Reports</strong>: Configure alerts for events and generate reports.</li>
<li><strong>Optimize</strong>: Refine searches, dashboards, and alerts as needed.</li>
</ol>
<h1 id="How-to-handle-controller-exceptions"><a href="#How-to-handle-controller-exceptions" class="headerlink" title="How to handle controller exceptions?"></a>How to handle controller exceptions?</h1><p>You can handle controller exceptions primarily through the <code>@ExceptionHandler</code> annotation for handling exceptions locally within a controller, and <code>@ControllerAdvice</code> or <code>@RestControllerAdvice</code> for global exception handling across all controllers. These mechanisms allow for centralized error handling, enabling cleaner and more maintainable code.</p>
<h1 id="Spring-validation"><a href="#Spring-validation" class="headerlink" title="Spring validation?"></a>Spring validation?</h1><p>Spring Validation is a mechanism in the Spring Framework for validating Java bean properties using the Validator interface or annotations like @NotNull. It ensures data meets business rules before processing or persistence, separating validation from business logic for cleaner code.</p>
<h1 id="What-does-SpringBootApplication-mean"><a href="#What-does-SpringBootApplication-mean" class="headerlink" title="What does @SpringBootApplication mean?"></a>What does @SpringBootApplication mean?</h1><p><code>@SpringBootApplication</code> combines <code>@Configuration</code>, <code>@EnableAutoConfiguration</code>, and <code>@ComponentScan</code>, marking a class as a Spring Boot application’s main configuration.</p>
<h1 id="What-is-routing"><a href="#What-is-routing" class="headerlink" title="What is routing?"></a>What is routing?</h1><p>Routing is the process of directing network traffic or web requests to the appropriate destination or handler.</p>
<h2 id="How-do-you-create-a-rest-controller"><a href="#How-do-you-create-a-rest-controller" class="headerlink" title="How do you create a rest controller?"></a>How do you create a rest controller?</h2><p>Annotate a class with <code>@RestController</code> and define methods with <code>@GetMapping</code>, <code>@PostMapping</code>, etc., for HTTP requests.</p>
<h1 id="What-is-service-discovery"><a href="#What-is-service-discovery" class="headerlink" title="What is service discovery?"></a>What is service discovery?</h1><p>Service discovery is a mechanism that automatically finds and connects services in a microservices architecture, using tools like Eureka, Consul, and Zookeeper.</p>
<h1 id="Ways-to-connect-to-database"><a href="#Ways-to-connect-to-database" class="headerlink" title="Ways to connect to database"></a>Ways to connect to database</h1><ol>
<li><p>JDBC</p>
</li>
<li><p>JPA</p>
</li>
<li><p>Hibernate</p>
</li>
<li><p>Spring Data JPA</p>
</li>
<li><p>MyBatis</p>
</li>
</ol>
<h1 id="spring-autoconfiguration"><a href="#spring-autoconfiguration" class="headerlink" title="spring autoconfiguration"></a>spring autoconfiguration</h1><p>Autoconfiguration in Spring Boot is a feature that automatically configures beans and other dependencies based on the classpath.</p>
<h1 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h1><p>Spring Boot Actuator provides built-in endpoints for monitoring and managing Spring Boot applications, such as health checks and metrics.</p>
<h1 id="design-pattern-of-circuit-breaker"><a href="#design-pattern-of-circuit-breaker" class="headerlink" title="design pattern of circuit breaker"></a>design pattern of circuit breaker</h1><p>The Circuit Breaker pattern prevents your system from repeatedly trying to execute an operation that’s likely to fail.  It has three states: Closed (normal operations), Half-Open (tests if the service is back to normal) and Open (blocks calls to the service to allow it to recover).</p>
<h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><ul>
<li>what is Kafka? </li>
<li><strong>topic</strong>: It’s like database table. Kafka uses the concept of topics to organize related messages. </li>
<li><strong>partitions</strong>: Topics are broken down into a number of partitions. </li>
<li><strong>The offset</strong>:  is an integer value that Kafka adds to each message as it is written into a partition. Each message in a given partition has a unique offset.</li>
<li><strong>broker</strong>: A broker in Kafka is a server that stores messages and facilitates their distribution and replication within a Kafka cluster.</li>
<li>consumer: Applications that read data from Kafka topics are known as consumers.</li>
<li>producer: Applications that send data into topics are known as Kafka producers.</li>
<li><strong>Source Connector</strong>: Imports data into Kafka. <strong>Sink Connector</strong>: Exports data from Kafka.</li>
</ul>
<h1 id="make-two-consumers-consume-one-partition-in-Kafka"><a href="#make-two-consumers-consume-one-partition-in-Kafka" class="headerlink" title="make two consumers consume one partition in Kafka?"></a>make two consumers consume one partition in Kafka?</h1><p>No, this is impossible. Unless we use differnt consumer group. </p>
<h1 id="How-to-use-docker-in-the-Spring-Boot"><a href="#How-to-use-docker-in-the-Spring-Boot" class="headerlink" title="How to use docker in the Spring Boot?"></a>How to use docker in the Spring Boot?</h1><ol>
<li><p>Create <code>Dockerfile</code>:</p>
</li>
<li><p>Build jar: <code>mvn package</code></p>
</li>
<li><p>Build image: <code>docker build -t myapp .</code></p>
</li>
<li><p>Run container: <code>docker run -p 8080:8080 myapp</code></p>
</li>
</ol>
<h1 id="kubernets-k8s-vs-docker"><a href="#kubernets-k8s-vs-docker" class="headerlink" title="kubernets&#x2F;k8s vs docker"></a>kubernets&#x2F;k8s vs docker</h1><p>Docker lets you create and run small, lightweight versions of your app. Kubernetes helps you manage those versions across many computers.</p>
<p>Docker is a containerization platform that packages and runs applications in containers, while Kubernetes is a container orchestration system that manages and scales containerized applications across multiple hosts.</p>
<h1 id="kubernetes-k8s"><a href="#kubernetes-k8s" class="headerlink" title="kubernetes&#x2F; k8s"></a>kubernetes&#x2F; k8s</h1><ul>
<li>what is pod<br>A Pod in Kubernetes is a group of one or more containers, sharing storage and network, running together on a cluster.</li>
</ul>
<p><img src="/../../assets/2024-03-18%20at%2017.32.04@2x.jpg"></p>
<p>Control Plane or master node<br><img src="/../../assets/2024-03-18%20at%2017.36.25@2x.jpg"></p>
<p><img src="/../../assets/2024-03-18%20at%2017.37.18@2x.jpg"></p>
]]></content>
      <categories>
        <category>Java Interview</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 LTSC</title>
    <url>//windows/ltsc/</url>
    <content><![CDATA[<p>原帖地址：<br><a href="https://www.reddit.com/r/Piracy/comments/ztd2mr/whats_the_preferred_method_for_getting_windows_10/">https://www.reddit.com/r/Piracy/comments/ztd2mr/whats_the_preferred_method_for_getting_windows_10/</a></p>
<blockquote>
<p>Download LTSC from <a href="https://massgrave.dev/genuine-installation-media.html">Here</a><br>Then get latest MAS from <a href="https://github.com/massgravel/Microsoft-Activation-Scripts/releases">Here</a><br>And activate your genuine LTSC.</p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>ltsc</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2备份</title>
    <url>//windows/wsl2-backup/</url>
    <content><![CDATA[<p>查看WSL运行状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>
<p>wsl关机的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure>

<p>卸载wsl:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure>


<p>导入wsl:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --import Ubuntu D:\WSL D:\WSL\Backup\Ubuntu.tar</span><br></pre></td></tr></table></figure>

<p>导出wsl：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --export Ubuntu D:\WSL\Backup\Ubuntu.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试——Leetcode代码库</title>
    <url>//java-interview/leetcode/</url>
    <content><![CDATA[<h1 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h1><h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">3. Longest Substring Without Repeating Characters</a></h2><p>背诵：<code>i</code>每次跳转到出现<strong>上一轮重复字母</strong>的<code>index + 1</code>上去，所以，map存的是出现重复字母上一轮的<code>index + 1</code></p>
<h3 id="最快解法："><a href="#最快解法：" class="headerlink" title="最快解法："></a>最快解法：</h3><p>O(n) + O(1):</p>
<p>其中，<code>for</code>循坏里面的<code>if条件</code>可以省略。map数组里存储的是上一轮这个字符存储的位置的后一个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="comment">// j + 1保证了，为0就代表这个字符以前不曾出现过。</span></span><br><span class="line">            <span class="keyword">if</span>(map[s.charAt(j)] != <span class="number">0</span>) &#123;</span><br><span class="line">                i = Math.max(i, map[s.charAt(j)]);</span><br><span class="line">            &#125;</span><br><span class="line">            map[s.charAt(j)] = j + <span class="number">1</span>;</span><br><span class="line">            res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="O-n-解法："><a href="#O-n-解法：" class="headerlink" title="O(n) 解法："></a>O(n) 解法：</h3><p>用哈希表存储字符串中的字符，与字符上一次出现的位置的后一个位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = map.get(s.charAt(j)) + <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j), j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="O-2n"><a href="#O-2n" class="headerlink" title="O(2n):"></a>O(2n):</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">            map[s.charAt(j)]++;</span><br><span class="line">            <span class="keyword">while</span> (map[s.charAt(j)] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                map[s.charAt(i)]--;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="424-Longest-Repeating-Character-Replacement"><a href="#424-Longest-Repeating-Character-Replacement" class="headerlink" title="424. Longest Repeating Character Replacement"></a><a href="https://leetcode.com/problems/longest-repeating-character-replacement/">424. Longest Repeating Character Replacement</a></h2><p>背诵：寻找<code>i</code>与<code>j</code>之间全局maxFrequency，检查区间<code>j - i + 1 - maxFrequency</code>。</p>
<ol>
<li>从字符串的开头开始，慢慢向右移动，一边移动一边数着这个区间内最多的那个字母出现了多少次（我们称这个数字为<code>maxFreq</code>）。</li>
<li>当你发现如果要把这个区间内的<strong>其他字母都变成<code>maxFreq</code>字母</strong>，需要改变的字母数量超过了k个时（j - i + 1 - maxFreq &gt; k），你就得缩小这个区间了。这时，你就从区间的左边开始删减，即移动左边的指针一次。</li>
<li>在整个过程中，你记录下你能找到的最长的这样的字母串的长度。即便有时候你加入了一个新字母，它并不是目前区间内最多的，但只要改变的总字母数不超过k，这个区间仍然有效。</li>
<li>最后，你找到的最长的这样的字母串就是你的答案</li>
</ol>
<p><strong>只有当最频繁字母的计数发生变化时，你才需要调整区间：</strong> 如果你遇到了一个新的最频繁字母，它的计数超过了当前的<code>maxFreq</code>，这时你需要重新评估你的区间。否则，只要改变的字母数量没有超过k，你就可以保持目前的区间，因为它可能是到目前为止你可以找到的最长的符合条件的区间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characterReplacement</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxFreq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">            maxFreq = Math.max(maxFreq, ++map[s.charAt(j) - <span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j - i + <span class="number">1</span> - maxFreq &gt; k) &#123;</span><br><span class="line">                map[s.charAt(i) -<span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res = Math.max(res, j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a><a href="https://leetcode.com/problems/permutation-in-string/">567. Permutation in String</a></h2><p>背诵：s1导入到array map（负数），再用array map检查s2，超过0代表逾值。</p>
<p>核心算法：</p>
<ol>
<li>遍历<code>s1</code>，记录下ASCII，对应的数组地方-1。</li>
<li>遍历<code>s2</code>，记录下ASCII，对应的数组地方+1。</li>
<li>如果数组<code>arr</code>中当前字符的计数大于0，这表示<code>s2</code>中的当前字符数量超过了<code>s1</code>中相应字符的数量。因此，需要移动滑动窗口的左边界（即<code>i</code>指针）向右移动，并相应地减少数组<code>arr</code>中该位置的计数，直到窗口内不再包含多余的字符。</li>
<li>实时监测滑动窗口的大小（即<code>j - i + 1</code>的值）。如果这个大小与<code>s1.length()</code>相等，这意味着我们在<code>s2</code>中找到了一个与<code>s1</code>长度相同的区域，其中每个字符的数量与<code>s1</code>中相应字符的数量匹配。这时返回true，表示找到了一个符合条件的排列。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.length() &gt; s2.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> s: s1.toCharArray()) &#123;</span><br><span class="line">            arr[s]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s2.length(); j++) &#123;</span><br><span class="line">            arr[s2.charAt(j)]++;</span><br><span class="line">            <span class="keyword">while</span>(arr[s2.charAt(j)] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[s2.charAt(i)]--;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j - i + <span class="number">1</span> == s1.length()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>















<h1 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h1><h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a><a href="https://leetcode.com/problems/minimum-window-substring/">76. Minimum Window Substring</a></h2><p><strong>Core Algorithm:</strong> Firstly, we utilize a hash table to record the frequency of characters in the string <code>t</code>, laying the groundwork for subsequent comparisons. Next, we employ the sliding window technique to find the smallest substring that contains all the characters of <code>t</code>.</p>
<p>During this process, we set up two pointers: a fast pointer and a slow pointer. The fast pointer is responsible for advancing forward, examining each character in <code>s</code>. Once we find a potential window that contains all characters of <code>t</code> through the fast pointer, the slow pointer starts its task. The job of the slow pointer is to minimize the current window’s size as much as possible while still ensuring all characters of <code>t</code> are included in the window.</p>
<p>Throughout the entire process, we dynamically record the size and position of the smallest window. If the slow pointer reduces the window to a point where it no longer contains all characters of <code>t</code>, we move the fast pointer again until we find the next eligible window. We repeat this process until the fast pointer has traversed the entire <code>s</code> string. The smallest window obtained at the end is the minimum covering substring we are looking for.</p>
<p><strong>细节：</strong><br><strong>1. 初始化哈希表：</strong></p>
<ul>
<li>**<code>need</code>**：我们创建了一个哈希表来记录<code>t</code>字符串中每个字符应该出现的次数。</li>
<li>**<code>have</code>**：我们也创建了一个哈希表来记录在<code>s</code>字符串的滑动窗口中各字符实际出现的次数。<br><strong>2. 开始滑动窗口：</strong></li>
<li>我们通过两个指针（快指针<code>j</code>和慢指针<code>i</code>）来表示窗口的起始和结束位置。快指针<code>j</code>用来扩展窗口，慢指针<code>i</code>用来收缩窗口。<br><strong>3. 扩展窗口：</strong></li>
<li>当快指针<code>j</code>移动时，我们将<code>s[j]</code>字符纳入考虑，并在<code>have</code>表中增加计数。如果这个字符是<code>t</code>中需要的，并且数量还不够，我们就知道我们离目标又近了一步，这时<code>count</code>计数器会增加。<br><strong>4. 收缩窗口：</strong></li>
<li>一旦我们通过快指针找到了一个可能的窗口（即<code>count</code>等于<code>t</code>的长度），我们就尝试通过移动慢指针<code>i</code>来缩小这个窗口的大小，同时确保窗口仍然“有效”（即包含所有<code>t</code>中的字符）。</li>
<li>每次移动慢指针时，我们会减少<code>have</code>表中相应字符的计数，并检查是否还满足条件。<br><strong>5. 更新最小窗口：</strong></li>
<li>在整个快慢指针的移动过程中，每当找到一个有效的窗口，我们都会检查它是否是到目前为止最小的窗口，并记录下来。<br><strong>6. 结束条件：</strong></li>
<li>我们这样移动快慢指针，直到快指针走到了<code>s</code>的末尾。最终，我们找到的最小窗口长度和位置，就是我们要求的最小覆盖子串。</li>
</ul>
<h2 id="239-Sliding-Window-Maximum"><a href="#239-Sliding-Window-Maximum" class="headerlink" title="239. Sliding Window Maximum"></a><a href="https://leetcode.com/problems/sliding-window-maximum/">239. Sliding Window Maximum</a></h2><p>需要使用一种称为“单调双端队列”（Monotonic Deque）的数据结构。这种队列的特点是，通过操作保持其元素始终按单调递增或递减的顺序排列。</p>
<p><strong>核心算法：</strong></p>
<ol>
<li><strong>填充队列</strong>：先把滑动窗口的第一个窗口的元素放进队列。（第一个for循坏）</li>
<li><strong>队列处理规则</strong>：<ul>
<li><strong>添加新元素</strong>：如果新元素比队列里的最后一个元素大，就把队列里的这个元素删掉。重复这个过程，直到队列里的所有比新元素小的元素都被删掉，再把新元素放进队列。</li>
<li><strong>移除旧元素</strong>：检查队列头部的元素是否已经不在当前窗口内（也就是太“旧”了），如果是，就从队列头部移除。</li>
</ul>
</li>
<li><strong>移动窗口</strong>：滑动窗口向右移动，重复步骤2。</li>
</ol>
<p>需要使用两个<code>for</code>循环。第一个<code>for</code>循环用于初始化单调队列，处理滑动窗口的第一个窗口，确保队列以合适的顺序存储元素的索引。第二个<code>for</code>循环用于处理滑动窗口的后续部分，随着窗口的滑动，逐个添加新元素到队列，并移除不再属于当前窗口的元素。</p>
<p><strong>关键点</strong>：</p>
<ul>
<li><strong>存的是索引</strong>：队列里存放的是元素的索引，不是元素的值。这样可以方便地知道队列头部的元素是否还在当前窗口内。</li>
<li><strong>只用if判断</strong>：每次窗口移动，只需要用<code>if</code>检查一下队列头部的元素是否过期（i - k意思就是在窗口之外的上一轮元素），因为窗口每次只移动一步，所以不会有多个元素同时过期。</li>
</ul>
<h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a><a href="https://leetcode.com/problems/reverse-linked-list/">206. Reverse Linked List</a></h2><p>关键在于循坏中新建一个nextNode</p>
<h2 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h2><p>这段代码创建了一个虚拟头结点（dummyHead），并使用<code>cur</code>作为这个虚拟头结点的“假身”进行操作。<code>cur</code>从<code>dummyHead</code>开始，逐步构建新的链表。我们比较两个链表的元素，并将较小值的节点依次连接到<code>cur</code>后面，同时移动相应链表的指针。当一个链表的节点全部被遍历完后，将另一个链表剩余部分直接连接到<code>cur</code>。最后，返回<code>dummyHead.next</code>作为合并后链表的头结点，这样就完成了两个链表的合并。</p>
<h2 id="143-Reorder-List"><a href="#143-Reorder-List" class="headerlink" title="143. Reorder List"></a><a href="https://leetcode.com/problems/reorder-list/">143. Reorder List</a></h2><p>第一种方法：<br>这种方法就是把所有的linked list的node放入到ArrayList中去，利用ArrayList方便的调取index，重新组成所需要的Linked list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ListNode&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            list.add(node);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            list.get(i).next = list.get(j);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.get(j).next = list.get(i);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        list.get(i).next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二种方法：</p>
<p>三步走</p>
<ol>
<li><strong>找出中心点</strong><ul>
<li>确定链表的中间节点。</li>
</ul>
</li>
<li><strong>翻转中心点之后的Linked List（mid.next之后），并将mid.next设置为null</strong><ul>
<li>这一步将前半段链表从中间节点处断开。</li>
</ul>
</li>
<li><strong>交错合并两个链表段</strong><ul>
<li>使用标志变量（flag）交替连接两个链表的节点，先连接前半部分，再连接后半部分，直到所有节点都被重新连接。</li>
</ul>
</li>
</ol>
<p><strong>举例说明：</strong></p>
<ul>
<li>原始链表：<code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</code></li>
<li>中间点：<code>3</code></li>
<li>翻转中间点之后的节点，得到 <code>1 -&gt; 2 -&gt; 3 -&gt; 5 -&gt; 4</code></li>
<li>断开中间节点后，形成两个链表：<code>1 -&gt; 2 -&gt; 3</code> 和 <code>5 -&gt; 4</code></li>
<li>利用flag重新合并两个链表。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> findMid(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> mid.next;</span><br><span class="line">        mid.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        l2 = reverseNode(l2);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            flag = !flag;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">findMid</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h2><p>这种题一定要设置dummyHead，因为需要处理删除仅有一个节点的情况。做一个nextToDelete记录，记录的是要删除节点的前一个节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            size++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        cur = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextToDelete</span> <span class="operator">=</span> size - n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count == nextToDelete) &#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（未完成）138-Copy-List-with-Random-Pointer"><a href="#（未完成）138-Copy-List-with-Random-Pointer" class="headerlink" title="（未完成）138. Copy List with Random Pointer"></a>（未完成）<a href="https://leetcode.com/problems/copy-list-with-random-pointer/">138. Copy List with Random Pointer</a></h2><h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a><a href="https://leetcode.com/problems/add-two-numbers/">2. Add Two Numbers</a></h2><p>遇到使用carry的时候，先计算sum值，再计算carry，这样carry就会在下一轮起到作用，而不影响这一轮的结果。计算sum的值一定要包含carry。</p>
<p>sum计算：<br><code>sum = (双值之和 + carry) % 10</code></p>
<p>carry计算：<br><code>carry = (双值之和 + carry) / 10</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                num1 = l1.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                num2 = l2.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2 + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            cur.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">null</span>)&#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h1><h2 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a><a href="https://leetcode.com/problems/linked-list-cycle/">141. Linked List Cycle</a></h2><p>兔子先跑，如果兔子找到了尽头，说明不是环，直接<code>return false</code>。如果兔子再一次遇到了乌龟，说明存在环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">r</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r != <span class="literal">null</span> &amp;&amp; r.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            r = r.next.next;</span><br><span class="line">            t = t.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (r == t) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="287-Find-the-Duplicate-Number"><a href="#287-Find-the-Duplicate-Number" class="headerlink" title="287. Find the Duplicate Number"></a><a href="https://leetcode.com/problems/find-the-duplicate-number/">287. Find the Duplicate Number</a></h2><h3 id="一个萝卜一个坑"><a href="#一个萝卜一个坑" class="headerlink" title="一个萝卜一个坑"></a>一个萝卜一个坑</h3><p>因为要求的的数字是1 - n，但是坑位只有n个，还有一个重复的数字。</p>
<p>由于索引 0 的位置不是任何数字的自然位置（因为范围是 1 到 n），所以它被用作临时存放当前处理的数字。把所有在坑位0的数字放到它本身的位子上去，碰到重复的，我们就算找到了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(nums[<span class="number">0</span>] != nums[nums[<span class="number">0</span>]]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[nums[<span class="number">0</span>]];</span><br><span class="line">            nums[nums[<span class="number">0</span>]] = nums[<span class="number">0</span>];</span><br><span class="line">            nums[<span class="number">0</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        fast = nums[nums[fast]];</span><br><span class="line">        slow = nums[slow];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != slow) &#123;</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        slow = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != slow) &#123;</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><a href="https://leetcode.com/problems/lru-cache/">146. LRU Cache</a></h2><p>用双向链表和HashMap实现，map里面key存key的值，value存链表。add和remove操作都是针对于链表本身而言。链表取出和放进代表了顺序，然后维护一下map就好。</p>
<p>记得，先建立add和remove方法。</p>
<h2 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a><a href="https://leetcode.com/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists</a></h2><p>这个interval的方法要默写的出来，一定要默写出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (lists.length == <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> <span class="variable">interval</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (interval &lt; lists.length) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists.length - interval; i += interval * <span class="number">2</span>) &#123;  </span><br><span class="line">                lists[i] = mergeTwo(lists[i], lists[i + interval]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            interval *= <span class="number">2</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> lists[<span class="number">0</span>];  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwo</span><span class="params">(ListNode node1, ListNode node2)</span> &#123;  </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();  </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyHead;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span> (node1 != <span class="literal">null</span> &amp;&amp; node2 != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (node1.val &gt; node2.val) &#123;  </span><br><span class="line">                cur.next = node2;  </span><br><span class="line">                node2 = node2.next;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                cur.next = node1;  </span><br><span class="line">                node1 = node1.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            cur = cur.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        cur.next = node1 == <span class="literal">null</span> ? node2 : node1;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25. Reverse Nodes in k-Group"></a><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">25. Reverse Nodes in k-Group</a></h2><p>核心算法：</p>
<p>先将K个Node进行翻转，然后检测：</p>
<ol>
<li>如果这是你翻转的第一段，那就记住这是新的项链起点；</li>
<li>如果之前已经有翻转过的段了，就把这段接在上一段的后面。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode[] reverseKNode(ListNode head, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = nextNode;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>[]&#123;pre, cur&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || k == <span class="number">1</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &gt;= k) &#123;</span><br><span class="line">            ListNode[] reverseInfo = reverseKNode(head, k);</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">revHead</span> <span class="operator">=</span> reverseInfo[<span class="number">0</span>];</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> reverseInfo[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newHead == <span class="literal">null</span>) &#123;</span><br><span class="line">                newHead = revHead;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                newTail.next = revHead;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            newTail = head;</span><br><span class="line">            head = nextNode;</span><br><span class="line"></span><br><span class="line">            count -= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newTail != <span class="literal">null</span>) &#123;</span><br><span class="line">            newTail.next = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="1-19"><a href="#1-19" class="headerlink" title="1.19"></a>1.19</h1><h2 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a><a href="https://leetcode.com/problems/same-tree/">100. Same Tree</a></h2><p>DFS，一个node没问题，递归调用下一个node。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">null</span> || q == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a><a href="https://leetcode.com/problems/subtree-of-another-tree/">572. Subtree of Another Tree</a></h2><p>算法核心：一个node一个node的比较subroot，每次比较调用一次isSameTree。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> &amp;&amp; subRoot == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || subRoot == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isSameTree(root, subRoot)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode n1, TreeNode n2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="literal">null</span> &amp;&amp; n2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(n1 == <span class="literal">null</span> || n2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n1.val == n2.val &amp;&amp; isSameTree(n1.left, n2.left) &amp;&amp; isSameTree(n1.right, n2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></h2><h3 id="1-无敌方法"><a href="#1-无敌方法" class="headerlink" title="1. 无敌方法"></a>1. 无敌方法</h3><p>后序遍历（先左子树，再右子树，最后访问当前节点）。这种遍历方法适用于此问题，因为它允许我们在返回到父节点之前先处理子节点。</p>
<p>在遍历树的过程中，当遇到<code>p</code>或<code>q</code>时，计数器增加1。这个计数器代表当前节点下有多少个目标节点（<code>p</code>或<code>q</code>）。</p>
<p>当一个节点的左子树、右子树中各有一个目标节点，或者该节点自身是一个目标节点且其左子树或右子树包含另一个目标节点时，此节点即为最低公共祖先。此时，计数器的总和将等于2。</p>
<p> 一旦找到最低公共祖先，即计数器的总和等于2，就将该节点赋值给<code>res</code>。为了避免不必要的进一步遍历，可以返回一个特殊值（如-1）来指示找到了最低公共祖先。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        dfs(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || found) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> dfs(root.left, p, q);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> dfs(root.right, p, q);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root == p || root == q ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mid + left + right == <span class="number">2</span>) &#123;</span><br><span class="line">            res = root;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left + right + mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-常规方法"><a href="#2-常规方法" class="headerlink" title="2. 常规方法"></a>2. 常规方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> right;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> left;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. Lowest Common Ancestor of a Binary Search Tree</a></h2><p>In a binary search tree, the first node that is between to two given nodes is their lowest common ancestor (LCA). There can be no closer common ancestor above this node.</p>
<h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">102. Binary Tree Level Order Traversal</a></h2><p>BFS:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        deque.offer(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">                temp.add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DFS:<br>每次到了新的一层，新建一个ArrayList；每次到了一个level，将当前值添加到当前level所在的list当中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(level == res.size()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        dfs(root.left, level + <span class="number">1</span>);</span><br><span class="line">        dfs(root.right, level + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199. Binary Tree Right Side View"></a><a href="https://leetcode.com/problems/binary-tree-right-side-view/">199. Binary Tree Right Side View</a></h2><p>BFS:</p>
<p>for循环遍历的是level，所以for循坏最后一个node，就是一层中最后一个node。</p>
<p>另外<code>Deque</code>中，<code>offer = offerLast</code>, <code>poll = pollFirst</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res ; </span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        deque.offerLast(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) deque.offerLast(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) deque.offerLast(node.right);</span><br><span class="line">                <span class="keyword">if</span> (i == size - <span class="number">1</span>) res.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DFS:<br>精髓在于，先<code>dfs(root.right</code>)再<code>dfs(root.left)</code>，并且要搞清楚当level &#x3D; res.size()的时候，一定是进入新的一层的时候。所以，左右互换顺序后，那么就拿到了所有右数的第一颗树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(level == res.size()) res.add(root.val);</span><br><span class="line"></span><br><span class="line">        dfs(root.right, level + <span class="number">1</span>);</span><br><span class="line">        dfs(root.left, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="1448-Count-Good-Nodes-in-Binary-Tree"><a href="#1448-Count-Good-Nodes-in-Binary-Tree" class="headerlink" title="1448. Count Good Nodes in Binary Tree"></a><a href="https://leetcode.com/problems/count-good-nodes-in-binary-tree/">1448. Count Good Nodes in Binary Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">goodNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, maxNum);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> maxNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(maxNum &lt;= root.val) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            maxNum = root.val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(root.left, maxNum);</span><br><span class="line">        dfs(root.right, maxNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/">98. Validate Binary Search Tree</a></h2><p>中序遍历的方法<br>InOrder（中序遍历）中，后一个数字一定比前一个数字要大。用prev记录上一个节点的信息，然后检测大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        dfs(root.left);</span><br><span class="line">        <span class="keyword">if</span>(prev != <span class="literal">null</span> &amp;&amp; prev.val &gt;= root.val) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = root;</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查range的方法：</p>
<p>注意，<code>high</code>用的是<code>MAX_VALUE</code>，<code>low</code>用的是<code>MIN_VALUE</code>，非常容易搞反。</p>
<p>因为首轮来说，我们只需要检测根节点，其余的地方不需要检查。所以我们必须保证根节点可以在<code>high</code>和<code>low</code>之间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, Long.MAX_VALUE, Long.MIN_VALUE);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">long</span> high, <span class="type">long</span> low)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt;= high || root.val &lt;= low) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        dfs(root.left, root.val, low);</span><br><span class="line">        dfs(root.right, high, root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="230-Kth-Smallest-Element-in-a-BST"><a href="#230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="230. Kth Smallest Element in a BST"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/">230. Kth Smallest Element in a BST</a></h2><p>一定要注意In Java, primitive data types like <code>int</code> are passed by value, not by reference. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        dfs(root, k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        dfs(root.left, k);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(k == count) &#123;</span><br><span class="line">            res = root.val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(root.right, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="1-22"><a href="#1-22" class="headerlink" title="1.22"></a>1.22</h1><h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. Construct Binary Tree from Preorder and Inorder Traversal</a></h2><p>背诵：使用preorder构建树，inorder只是用来辅助的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">preCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> myBuild(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">myBuild</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preCount++]);</span><br><span class="line"></span><br><span class="line">        root.left = myBuild(preorder, left, map.get(root.val) - <span class="number">1</span>);</span><br><span class="line">        root.right = myBuild(preorder, map.get(root.val) + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/">124. Binary Tree Maximum Path Sum</a></h2><p>（目前看来，做题前，可以先判断使用<code>前序遍历</code>还是<code>后续遍历</code>，然后使用高级抽象递归来做。）</p>
<p>对于每个节点，计算其最大单边贡献，并用它来更新全局的最大路径和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Math.max(dfs(root.left), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Math.max(dfs(root.right), <span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 之所以要加上root的值，是因为加上root的值才是一条新的路径，我们必须检验这条新的路径和。</span></span><br><span class="line">        maxVal = Math.max(maxVal, root.val + left + right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="297-Serialize-and-Deserialize-Binary-Tree"><a href="#297-Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="297. Serialize and Deserialize Binary Tree"></a><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/">297. Serialize and Deserialize Binary Tree</a></h2><p>背诵点：使用split进行分割，转化成String[]数组。</p>
<p>题目的意思是，在不使用成员变量的情况下，将TreeNode转化成String，再从转化好的String变换到TreeNode。不用管中间的过程，只要最后结果一致即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sHelper(root, sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sHelper</span><span class="params">(TreeNode root, StringBuilder sb)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;null&quot;</span>).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(String.valueOf(root.val)).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        sHelper(root.left, sb);</span><br><span class="line">        sHelper(root.right, sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        String[] dataSet = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(Arrays.asList(dataSet));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dHelper(deque);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">dHelper</span><span class="params">(Deque&lt;String&gt; deque)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deque.peekFirst().equals(<span class="string">&quot;null&quot;</span>)) &#123;</span><br><span class="line">            deque.pollFirst();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(deque.peekFirst()));</span><br><span class="line">        deque.pollFirst();</span><br><span class="line"></span><br><span class="line">        root.left = dHelper(deque);</span><br><span class="line">        root.right = dHelper(deque);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">208. Implement Trie (Prefix Tree)</a></h2><p>背诵：Trie由isEnd与children数组组成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    Trie[] children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> w: word.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> w - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[index] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> w: word.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> w - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> w: word.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> w - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="211-Design-Add-and-Search-Words-Data-Structure"><a href="#211-Design-Add-and-Search-Words-Data-Structure" class="headerlink" title="211. Design Add and Search Words Data Structure"></a><a href="https://leetcode.com/problems/design-add-and-search-words-data-structure/">211. Design Add and Search Words Data Structure</a></h2><p>使用trie，题目要求其实是小数点不会被存入，只要在search方法之单独处理小数点即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line">    WordDictionary[] children;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDictionary</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">WordDictionary</span>[<span class="number">128</span>];</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">WordDictionary</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[word.charAt(i)] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[word.charAt(i)] = <span class="keyword">new</span> <span class="title class_">WordDictionary</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[word.charAt(i)];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">WordDictionary</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(word.charAt(i) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(WordDictionary w: node.children) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(w != <span class="literal">null</span> &amp;&amp; w.search(word.substring(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(node.children[word.charAt(i)] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.children[word.charAt(i)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79. Word Search"></a><a href="https://leetcode.com/problems/word-search/">79. Word Search</a></h2><p>传统dfs算法。</p>
<p>另外，这里使用charArray性能比直接使用word.charAt()这个方法快很多，虽然两种方法时间复杂度都是O(1)，但因为各种开销，charArray要比word.charAt(i)这个方法快很多。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] w = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dfs(board, w, i, j, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">char</span>[] w, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; board.length - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; board[<span class="number">0</span>].length - <span class="number">1</span> || board[i][j] != w[k]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == w.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> dfs(board, w, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, w, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, w, i, j+ <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, w, i, j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = w[k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="212-Word-Search-II"><a href="#212-Word-Search-II" class="headerlink" title="212. Word Search II"></a><a href="https://leetcode.com/problems/word-search-ii/">212. Word Search II</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findWords</span><span class="params">(<span class="type">char</span>[][] board, String[] words)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(String word: words) &#123;</span><br><span class="line">            node.insert(word);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                dfs(board, i, j, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j, Trie node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; board.length - <span class="number">1</span> || i &lt; <span class="number">0</span> || j &gt; board[<span class="number">0</span>].length - <span class="number">1</span> || j &lt; <span class="number">0</span> </span><br><span class="line">        || board[i][j] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">current</span> <span class="operator">=</span> board[i][j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.children[current - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.children[current - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.end != <span class="literal">null</span>) &#123;</span><br><span class="line">            res.add(node.end);</span><br><span class="line">            node.end = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        dfs(board, i + <span class="number">1</span>, j, node);</span><br><span class="line">        dfs(board, i - <span class="number">1</span>, j, node);</span><br><span class="line">        dfs(board, i, j + <span class="number">1</span>, node);</span><br><span class="line">        dfs(board, i, j - <span class="number">1</span>, node);</span><br><span class="line"></span><br><span class="line">        board[i][j] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    String end;</span><br><span class="line">    Trie[] children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        end = <span class="literal">null</span>;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> w: word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(node.children[w - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[w - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[w - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node.end = word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>超越99%性能的算法，不要求掌握：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findWords</span><span class="params">(<span class="type">char</span>[][] board, String[] words)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">trie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            trie.insert(word);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                dfs(board, i, j, trie, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j, Trie node, List&lt;String&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] == <span class="string">&#x27;#&#x27;</span> || node.children[board[i][j] - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">currentChar</span> <span class="operator">=</span> board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">childNode</span> <span class="operator">=</span> node.children[currentChar - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (childNode.word != <span class="literal">null</span>) &#123;</span><br><span class="line">            result.add(childNode.word);</span><br><span class="line">            childNode.word = <span class="literal">null</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(board, i + <span class="number">1</span>, j, childNode, result);</span><br><span class="line">        dfs(board, i - <span class="number">1</span>, j, childNode, result);</span><br><span class="line">        dfs(board, i, j + <span class="number">1</span>, childNode, result);</span><br><span class="line">        dfs(board, i, j - <span class="number">1</span>, childNode, result);</span><br><span class="line"></span><br><span class="line">        board[i][j] = currentChar; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 就是这个提升的性能</span></span><br><span class="line">        <span class="keyword">if</span> (isLeafNode(childNode)) &#123;</span><br><span class="line">            node.children[currentChar - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isLeafNode</span><span class="params">(Trie node)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Trie child : node.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    String word;</span><br><span class="line">    Trie[] children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        word = <span class="literal">null</span>;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[index] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        node.word = word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="1-26"><a href="#1-26" class="headerlink" title="1.26"></a>1.26</h1><h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a><a href="https://leetcode.com/problems/subsets/">78. Subsets</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        dfs(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin)</span> &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(deque));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; nums.length; i++) &#123;</span><br><span class="line">            deque.offerLast(nums[i]);</span><br><span class="line">            dfs(nums, i + <span class="number">1</span>);</span><br><span class="line">            deque.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a><a href="https://leetcode.com/problems/combination-sum/">39. Combination Sum</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        dfs(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] canditates, <span class="type">int</span> target, <span class="type">int</span> curSum, <span class="type">int</span> begin)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(curSum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(deque));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(curSum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; canditates.length; i++) &#123;</span><br><span class="line">            deque.offerLast(canditates[i]);</span><br><span class="line">            dfs(canditates, target, curSum + canditates[i], i);</span><br><span class="line">            deque.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/">46. Permutations</a></h2><h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/">90. Subsets II</a></h2><h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a><a href="https://leetcode.com/problems/combination-sum-ii/">40. Combination Sum II</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        dfs(candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> curSum, <span class="type">int</span> begin)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(curSum &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curSum == target) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(deque));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= begin &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(candidates[i]);</span><br><span class="line">            dfs(candidates, target, curSum + candidates[i], i + <span class="number">1</span>);</span><br><span class="line">            deque.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a><a href="https://leetcode.com/problems/palindrome-partitioning/">131. Palindrome Partitioning</a></h2><h2 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">17. Letter Combinations of a Phone Number</a></h2><h1 id="1-29"><a href="#1-29" class="headerlink" title="1.29"></a>1.29</h1><h2 id="51-N-Queens"><a href="#51-N-Queens" class="headerlink" title="51. N-Queens"></a><a href="https://leetcode.com/problems/n-queens/">51. N-Queens</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; cols = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; diagonals = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; antiDiagonals = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(n, board, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span>[][] board, <span class="type">int</span> row)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(row == n) &#123;</span><br><span class="line">            List&lt;String&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(board[i]);</span><br><span class="line">                temp.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cols.contains(col) || diagonals.contains(row - col) || antiDiagonals.contains(row + col)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cols.add(col);</span><br><span class="line">            diagonals.add(row - col);</span><br><span class="line">            antiDiagonals.add(row + col);</span><br><span class="line">            board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            dfs(n, board, row + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            cols.remove(col);</span><br><span class="line">            diagonals.remove(row - col);</span><br><span class="line">            antiDiagonals.remove(row + col);</span><br><span class="line">            board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="703-Kth-Largest-Element-in-a-Stream"><a href="#703-Kth-Largest-Element-in-a-Stream" class="headerlink" title="703. Kth Largest Element in a Stream"></a><a href="https://leetcode.com/problems/kth-largest-element-in-a-stream/">703. Kth Largest Element in a Stream</a></h2><h2 id="1046-Last-Stone-Weight"><a href="#1046-Last-Stone-Weight" class="headerlink" title="1046. Last Stone Weight"></a><a href="https://leetcode.com/problems/last-stone-weight/">1046. Last Stone Weight</a></h2><h2 id="973-K-Closest-Points-to-Origin"><a href="#973-K-Closest-Points-to-Origin" class="headerlink" title="973. K Closest Points to Origin"></a><a href="https://leetcode.com/problems/k-closest-points-to-origin/">973. K Closest Points to Origin</a></h2><p>使用最大堆时，我们实际上是在维护一组最小值；而使用最小堆时，则是在维护一组最大值。这看似矛盾的做法，其实是因为最大堆的<code>poll()</code>操作会移除当前最大的元素，而最小堆的<code>poll()</code>则移除当前最小的元素。因此，在寻找k个最大元素时采用最小堆，而寻找k个最小元素时则采用最大堆，以此确保能够高效地更新和维护目标元素集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] kClosest(<span class="type">int</span>[][] points, <span class="type">int</span> k) &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt;</span><br><span class="line">                 (b[<span class="number">0</span>] * b[<span class="number">0</span>] + b[<span class="number">1</span>] * b[<span class="number">1</span>]) - (a[<span class="number">0</span>] * a[<span class="number">0</span>] + a[<span class="number">1</span>] * a[<span class="number">1</span>]));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] point: points) &#123;</span><br><span class="line">            heap.offer(point);</span><br><span class="line">            <span class="keyword">if</span>(heap.size() &gt; k) &#123;</span><br><span class="line">                heap.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[k][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(heap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res[i++] = heap.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array</a></h2><h2 id="621-Task-Scheduler"><a href="#621-Task-Scheduler" class="headerlink" title="621. Task Scheduler"></a><a href="https://leetcode.com/problems/task-scheduler/">621. Task Scheduler</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leastInterval</span><span class="params">(<span class="type">char</span>[] tasks, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> task: tasks) &#123;</span><br><span class="line">            map[task - <span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m: map) &#123;</span><br><span class="line">            max = Math.max(max, m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m: map) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m == max) maxCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(tasks.length, (n + <span class="number">1</span>) * (max - <span class="number">1</span>) + maxCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h1><h2 id="355-Design-Twitter"><a href="#355-Design-Twitter" class="headerlink" title="355. Design Twitter"></a><a href="https://leetcode.com/problems/design-twitter/">355. Design Twitter</a></h2><h2 id="295-Find-Median-from-Data-Stream"><a href="#295-Find-Median-from-Data-Stream" class="headerlink" title="295. Find Median from Data Stream"></a><a href="https://leetcode.com/problems/find-median-from-data-stream/">295. Find Median from Data Stream</a></h2><h2 id="200-Number-of-Islands"><a href="#200-Number-of-Islands" class="headerlink" title="200. Number of Islands"></a><a href="https://leetcode.com/problems/number-of-islands/">200. Number of Islands</a></h2><h2 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133. Clone Graph"></a><a href="https://leetcode.com/problems/clone-graph/">133. Clone Graph</a></h2><h2 id="695-Max-Area-of-Island"><a href="#695-Max-Area-of-Island" class="headerlink" title="695. Max Area of Island"></a><a href="https://leetcode.com/problems/max-area-of-island/">695. Max Area of Island</a></h2><h2 id="417-Pacific-Atlantic-Water-Flow"><a href="#417-Pacific-Atlantic-Water-Flow" class="headerlink" title="417. Pacific Atlantic Water Flow"></a><a href="https://leetcode.com/problems/pacific-atlantic-water-flow/">417. Pacific Atlantic Water Flow</a></h2><h2 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a><a href="https://leetcode.com/problems/surrounded-regions/">130. Surrounded Regions</a></h2><h2 id="994-Rotting-Oranges"><a href="#994-Rotting-Oranges" class="headerlink" title="994. Rotting Oranges"></a><a href="https://leetcode.com/problems/rotting-oranges/">994. Rotting Oranges</a></h2><h1 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h1><h2 id="286-Walls-and-Gates"><a href="#286-Walls-and-Gates" class="headerlink" title="286. Walls and Gates"></a><a href="https://leetcode.com/problems/walls-and-gates/">286. Walls and Gates</a></h2><h2 id="207-Course-Schedule"><a href="#207-Course-Schedule" class="headerlink" title="207. Course Schedule"></a><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a></h2><h2 id="210-Course-Schedule-II"><a href="#210-Course-Schedule-II" class="headerlink" title="210. Course Schedule II"></a><a href="https://leetcode.com/problems/course-schedule-ii/">210. Course Schedule II</a></h2><h2 id="684-Redundant-Connection"><a href="#684-Redundant-Connection" class="headerlink" title="684. Redundant Connection"></a><a href="https://leetcode.com/problems/redundant-connection/">684. Redundant Connection</a></h2><h2 id="323-Number-of-Connected-Components-in-an-Undirected-Graph"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph" class="headerlink" title="323. Number of Connected Components in an Undirected Graph"></a><a href="https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/">323. Number of Connected Components in an Undirected Graph</a></h2><h2 id="261-Graph-Valid-Tree"><a href="#261-Graph-Valid-Tree" class="headerlink" title="261. Graph Valid Tree"></a><a href="https://leetcode.com/problems/graph-valid-tree/">261. Graph Valid Tree</a></h2><h1 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a>2.9</h1><h2 id="127-Word-Ladder"><a href="#127-Word-Ladder" class="headerlink" title="127. Word Ladder"></a><a href="https://leetcode.com/problems/word-ladder/">127. Word Ladder</a></h2><h2 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70. Climbing Stairs"></a><a href="https://leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a></h2><h2 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746. Min Cost Climbing Stairs"></a><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">746. Min Cost Climbing Stairs</a></h2><h2 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a><a href="https://leetcode.com/problems/house-robber/">198. House Robber</a></h2><h2 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a><a href="https://leetcode.com/problems/house-robber-ii/">213. House Robber II</a></h2><h2 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a></h2><h2 id="647-Palindromic-Substrings"><a href="#647-Palindromic-Substrings" class="headerlink" title="647. Palindromic Substrings"></a><a href="https://leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a></h2><h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a><a href="https://leetcode.com/problems/decode-ways/">91. Decode Ways</a></h2><h1 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h1><h2 id="322-Coin-Change"><a href="#322-Coin-Change" class="headerlink" title="322. Coin Change"></a><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a></h2><h2 id="152-Maximum-Product-Subarray"><a href="#152-Maximum-Product-Subarray" class="headerlink" title="152. Maximum Product Subarray"></a><a href="https://leetcode.com/problems/maximum-product-subarray/">152. Maximum Product Subarray</a></h2><h2 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a><a href="https://leetcode.com/problems/word-break/">139. Word Break</a></h2><h2 id="300-Longest-Increasing-Subsequence"><a href="#300-Longest-Increasing-Subsequence" class="headerlink" title="300. Longest Increasing Subsequence"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence</a></h2><h2 id="416-Partition-Equal-Subset-Sum"><a href="#416-Partition-Equal-Subset-Sum" class="headerlink" title="416. Partition Equal Subset Sum"></a><a href="https://leetcode.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a></h2><h1 id="2-19"><a href="#2-19" class="headerlink" title="2.19"></a>2.19</h1><h2 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a><a href="https://leetcode.com/problems/jump-game-ii/">45. Jump Game II</a></h2><h2 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a><a href="https://leetcode.com/problems/gas-station/">134. Gas Station</a></h2><h2 id="846-Hand-of-Straights"><a href="#846-Hand-of-Straights" class="headerlink" title="846. Hand of Straights"></a><a href="https://leetcode.com/problems/hand-of-straights/">846. Hand of Straights</a></h2><h2 id="1899-Merge-Triplets-to-Form-Target-Triplet"><a href="#1899-Merge-Triplets-to-Form-Target-Triplet" class="headerlink" title="1899. Merge Triplets to Form Target Triplet"></a><a href="https://leetcode.com/problems/merge-triplets-to-form-target-triplet/">1899. Merge Triplets to Form Target Triplet</a></h2><h2 id="763-Partition-Labels"><a href="#763-Partition-Labels" class="headerlink" title="763. Partition Labels"></a><a href="https://leetcode.com/problems/partition-labels/">763. Partition Labels</a></h2><h2 id="678-Valid-Parenthesis-String"><a href="#678-Valid-Parenthesis-String" class="headerlink" title="678. Valid Parenthesis String"></a><a href="https://leetcode.com/problems/valid-parenthesis-string/">678. Valid Parenthesis String</a></h2>]]></content>
      <categories>
        <category>Java Interview</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS隐藏Dock栏</title>
    <url>//macos/hide-mac-dock/</url>
    <content><![CDATA[<p>通过以下步骤，你可以临时改变Dock的行为和外观，包括隐藏Dock、延长其出现的等待时间，以及减小其图标的尺寸，使其即便是进行手势操作时也难以被看到。</p>
<h3 id="第一步：隐藏Dock"><a href="#第一步：隐藏Dock" class="headerlink" title="第一步：隐藏Dock"></a>第一步：隐藏Dock</h3><ul>
<li>快捷键 <code>Option + Command + D</code> 可以切换Dock的自动隐藏和显示。这是一个快速的方式来隐藏Dock，让桌面看起来更整洁。</li>
</ul>
<h3 id="第二步：延长Dock显示的等待时间"><a href="#第二步：延长Dock显示的等待时间" class="headerlink" title="第二步：延长Dock显示的等待时间"></a>第二步：延长Dock显示的等待时间</h3><ul>
<li>为了在极长的时间内鼠标悬停时Dock不出现，你可以设置一个很长的延迟时间。以下命令将Dock的自动显示延迟设置为1000秒。这意味着，在鼠标移至屏幕边缘（根据Dock位置设置，通常是底部）后，需要等待约16分钟40秒，Dock才会显示出来。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Dock autohide-delay -float 1000 &amp;&amp; killall Dock</span><br></pre></td></tr></table></figure>

<p>要还原Dock显示的延迟时间到默认设置，使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock</span><br></pre></td></tr></table></figure>

<h3 id="第三步：缩小Dock图标的尺寸"><a href="#第三步：缩小Dock图标的尺寸" class="headerlink" title="第三步：缩小Dock图标的尺寸"></a>第三步：缩小Dock图标的尺寸</h3><p>如果你想要让Dock图标变得极其微小，甚至在使用四指上滑手势时也难以察觉其存在，可以通过以下命令设置Dock图标的尺寸为1像素：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.dock tilesize -float 1; killall Dock</span><br></pre></td></tr></table></figure>

<p>若要撤销图标尺寸的更改，恢复到默认大小，可以使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.dock tilesize; killall Dock</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>macOS</category>
      </categories>
  </entry>
  <entry>
    <title>利用Prallels完美绕过监控的一些感悟</title>
    <url>//macos/parallels-monitoring-bypass-tips/</url>
    <content><![CDATA[<h1 id="第一，设置双鼠标"><a href="#第一，设置双鼠标" class="headerlink" title="第一，设置双鼠标"></a>第一，设置双鼠标</h1><p>双鼠标很重要，如果没有设置双鼠标，那么每次调整宿主机窗口的时候，鼠标会移动的最边缘部分，这样子就会被发现。所以，设置双鼠标的话，虚拟机里面一个鼠标，host里面一个鼠标，这才是我们想要达到的效果。</p>
<p>但实际操作来看，操作两个鼠标会很麻烦，因此，我们只需要做到将虚拟机中的鼠标每次进行释放，然后这个时候就可以操作host的窗口了。</p>
<p>方法如下：<br><a href="https://kb.parallels.com/122903">https://kb.parallels.com/122903</a></p>
<h2 id="For-Windows-virtual-machines"><a href="#For-Windows-virtual-machines" class="headerlink" title="For Windows virtual machines"></a>For Windows virtual machines</h2><ol>
<li><p>Shut Down virtual machine.</p>
</li>
<li><p>Open Virtual Machine <a href="http://kb.parallels.com/en/117287" title="http://kb.parallels.com/en/117287">configuration</a>.</p>
</li>
<li><p>Go to <strong>Hardware &gt; Boot Order &gt;</strong> and paste in <strong>Boot Flags</strong> box:</p>
<p> <code>video.hw_pointer=0</code></p>
</li>
</ol>
<p><strong>Note:</strong> The above solution will work fine when using a virtual machine for simple tasks such as document processing, but heavier usage (like games or 3D software) may work unreliably.</p>
<h2 id="For-macOS-virtual-machines"><a href="#For-macOS-virtual-machines" class="headerlink" title="For macOS virtual machines"></a>For macOS virtual machines</h2><p>Click Apple logo &gt; <strong>System Preferences</strong> &gt; <strong>Accessibility</strong> &gt; <strong>Display</strong> &gt; <strong>Cursor</strong> and move the <strong>Cursor size</strong> slider slightly to the right.</p>
<p><strong>Note:</strong> Due to technical limitations imposed by macOS, this solution may result in the performance degradation as well as visual artefacts. If this happens, there are no workarounds to mitigate it.</p>
<h2 id="For-Linux-virtual-machines"><a href="#For-Linux-virtual-machines" class="headerlink" title="For Linux virtual machines"></a>For Linux virtual machines</h2><p>Due to technical limitations, the only way to achieve this in Linux virtual machines is to <a href="https://kb.parallels.com/117044">uninstall Parallels Tools</a>.</p>
<h1 id="第二，取消numslock映射"><a href="#第二，取消numslock映射" class="headerlink" title="第二，取消numslock映射"></a>第二，取消numslock映射</h1><p>每次释放鼠标或者进入parallels会映射一个numslock，因此需要取消这个功能。详情参考文档：<br><a href="https://kb.parallels.com/122898">https://kb.parallels.com/122898</a></p>
<p>You can change the key used for the synchronization or disable this feature executing the following commands in <strong>Terminal ( Finder &gt; &#x2F;Applications&#x2F;Utilities&#x2F;Terminal)</strong>:</p>
<p><strong>Quit Parallels Desktop before executing commands</strong>. Otherwise changes will not take affect.</p>
<ul>
<li><p>to disable the synchronization of <strong>numeric pad</strong> state:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write &#x27;com.parallels.Parallels Desktop&#x27; &#x27;HID Host Hook.LED Sync&#x27; -int 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>to make Parallels Desktop use and send <strong>NumLock</strong> button for the synchronization:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write &#x27;com.parallels.Parallels Desktop&#x27; &#x27;HID Host Hook.LED Sync&#x27; -int 1</span><br></pre></td></tr></table></figure>
<p>  <strong>Please note</strong> that Numlock is used by default.</p>
</li>
<li><p>to make Parallels Desktop use and send <strong>ScrollLock</strong> button for the synchronization:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write &#x27;com.parallels.Parallels Desktop&#x27; &#x27;HID Host Hook.LED Sync&#x27; -int 2</span><br></pre></td></tr></table></figure>
</li>
<li><p>to make Parallels Desktop use and send <strong>CapsLock</strong> button for the synchronization:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write &#x27;com.parallels.Parallels Desktop&#x27; &#x27;HID Host Hook.LED Sync&#x27; -int 3</span><br></pre></td></tr></table></figure>
</li>
<li><p>to discard all changes, please use the following command:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults delete &#x27;com.parallels.Parallels Desktop&#x27; &#x27;HID Host Hook.LED Sync&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>parallels</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS快照恢复</title>
    <url>//macos/mac-snapshot-recovery/</url>
    <content><![CDATA[<p>打快照</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmutil snapshot</span><br></pre></td></tr></table></figure>

<p>列出所有快照</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmutil listlocalsnapshots /</span><br></pre></td></tr></table></figure>

<p>删除一个快照的方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmutil deletelocalsnapshots 这个地方使用快照的日期</span><br></pre></td></tr></table></figure>

<p>删除所有快照</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmutil deletelocalsnapshots /</span><br></pre></td></tr></table></figure>

<p>恢复快照的方法，就是进入macOS启动设置页面，选择time machine进行恢复，然后选择相应的快照，即可几秒内将系统完整的恢复到上一个快照的状态，其间录入的指纹有可能丢失。</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
  </entry>
  <entry>
    <title>将Brainwaves（神奇脑波）的音乐提取出来</title>
    <url>//macos/extract-brainwaves-music/</url>
    <content><![CDATA[<p>在付费了永久版的神奇脑波之后（付费的是中文版，然后也给了英文版的使用），从App Store下载英文版的神奇脑波，名字叫作Brainwaves。</p>
<p>他们公司名叫做iMobLife，认真搜索一下就能搜到这个app，然后在下面的文件可以找到音乐源文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/(yourUserName)/Library/Containers/Brainwaves/Data/Documents/DownloadedMusic</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Brainwaves</tag>
      </tags>
  </entry>
  <entry>
    <title>解决macOS应用程序损坏无法打开</title>
    <url>//macos/fix-app-damage/</url>
    <content><![CDATA[<p>在终端输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xattr -cr /Applications/AppName.app</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
  </entry>
  <entry>
    <title>macOS检查最近变动文件的方法</title>
    <url>//macos/track-macos-recent-file-activity/</url>
    <content><![CDATA[<p>用HoudahSpot或者mac的自带finder（但是测试自带finder查找的文件远远少于HoudahSpot，原因未知），查找项目为<strong>Date Added</strong></p>
<p>然后在Location区域排除掉不需要查找的文件夹，即可找到最新在mac变动的文件。</p>
<p>参考配置如下：<br><img src="/../../../assets/2024-03-07%20at%2023.59.19@2x.jpg"></p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>houdahspot</tag>
      </tags>
  </entry>
  <entry>
    <title>隐藏Skype在macOS dock栏的显示</title>
    <url>//macos/hide-skype-dock/</url>
    <content><![CDATA[<p>Sonoma测试下有效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write /Applications/Skype.app/Contents/Info LSUIElement 1</span><br></pre></td></tr></table></figure>

<p>经过测试，<strong>发现即使手动修改Info.plist，加上<code>LSUIElement</code>为<code>true</code>也无法起作用</strong>，会显示程序出现错误。原因不明，可能是因为手动修改后，无法取得系统信任。</p>
<p>推测对于其他软件也可以起到相同的隐藏dock的作用。</p>
<p><strong>已知问题</strong>：<br>虽然确实可以在dock隐藏，但是每次都需要重新登录skype，原因不明。</p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>skype</tag>
        <tag>dock</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator 学习</title>
    <url>//work/iterator</url>
    <content><![CDATA[<h3 id="理解-Java-中的-Iterator"><a href="#理解-Java-中的-Iterator" class="headerlink" title="理解 Java 中的 Iterator"></a>理解 Java 中的 Iterator</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在 Java 集合框架中，<code>Iterator</code> 是一个基本的接口，用于遍历集合元素，如 <code>List</code> 和 <code>Set</code>。它提供了 <code>next()</code>、<code>hasNext()</code> 和 <code>remove()</code> 等方法，支持单向遍历并安全修改集合。</p>
<h4 id="Iterator-基础"><a href="#Iterator-基础" class="headerlink" title="Iterator 基础"></a>Iterator 基础</h4><ul>
<li>**<code>hasNext()</code>**：检查是否还有元素未遍历。</li>
<li>**<code>next()</code>**：返回当前位置的元素，并移向下一个。</li>
<li>**<code>remove()</code>**：删除最近通过 <code>next()</code> 方法访问的元素。</li>
</ul>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">Iterator&lt;Integer&gt; it = numbers.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="number">3</span>) &#123;</span><br><span class="line">        it.remove(); <span class="comment">// 删除元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(numbers); <span class="comment">// 输出: [1, 2, 4, 5]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在此示例中，我们遍历 <code>ArrayList</code> 并在遍历过程中删除了元素 <code>3</code>。</p>
<h4 id="优势与限制"><a href="#优势与限制" class="headerlink" title="优势与限制"></a>优势与限制</h4><p><strong>优势</strong>：</p>
<ul>
<li><strong>安全修改</strong>：允许在遍历时安全删除元素，避免 <code>ConcurrentModificationException</code>。</li>
</ul>
<p><strong>限制</strong>：</p>
<ul>
<li><strong>单向遍历</strong>：只能向前移动，不能回退。</li>
<li><strong>有状态</strong>：每次调用 <code>next()</code> 后，无法重新访问先前的元素。</li>
</ul>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><code>Iterator</code> 是处理 Java 集合的强大工具，尤其适合在遍历过程中需要修改集合的场景。掌握其使用可以提高程序的健壮性和效率。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>工作总结</tag>
      </tags>
  </entry>
  <entry>
    <title>git用法总结</title>
    <url>//tech-stack/git/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>tech-stack</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
      </tags>
  </entry>
</search>
